<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ssyyxx123</title>
  
  
  <link href="http://ssyyxx123.github.io/atom.xml" rel="self"/>
  
  <link href="http://ssyyxx123.github.io/"/>
  <updated>2023-06-09T01:12:54.694Z</updated>
  <id>http://ssyyxx123.github.io/</id>
  
  <author>
    <name>syx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark（Pyspark基础环境编码配置）</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/</id>
    <published>2023-06-09T00:13:10.000Z</published>
    <updated>2023-06-09T01:12:54.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（pyspark基础编码环境）"><a href="#spark（pyspark基础编码环境）" class="headerlink" title="spark（pyspark基础编码环境）"></a><strong>spark（pyspark基础编码环境）</strong></h2><p>（一）、pyspark环境配置安装。</p><p>PySpark是Spark官方提供的一个Python类库，内置了Spark API，可以通过PySpark类库来编写Spark程序，并提交到Spark集群中运行。前情提示：</p><p>（1）将课程资料中提供的的hadoop-3.3.0文件，复制到某个盘符下（中文的且无空格的）。</p><p>（2）将文件夹内bin内的Hadoop.dll复制到C:\Windows\Systmctl32里面去。</p><p>（3）在系统环境变量中配置HADOOP_HOME，指向hadoop-3.3.0文件夹的路径.</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps154.jpg" alt="img"> </p><p>（二）本机PySpark环境配置</p><p>在前面部署Spark的时候，已经在Linux系统上部署了acaconda的Python环境，详见Spark的Stand Alone模式部署章节。故本次在Windows上安装anaconda，并配置PySpark库。具体安装步骤如下：</p><p>（1）在课程资料中选择anaconda应用程序双击安装。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps155.jpg" alt="img"> </p><p>（2）一直选择Next，进行安装。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps156.png" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps157.png" alt="img"> </p><p>注意：选择第一个，将anaconda添加至我的环境变量中！</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps158.png" alt="img"> </p><p>（1）安装结束后会出现anaconda3文件夹。打开Anaconda Prompt(anaconda),会出现base，即为安装成功。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps159.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps160.jpg" alt="img"> </p><p>（4）配置国内源，加速网络下载。</p><p>1、在Anaconda Prompt(anaconda)中执行conda config –set show_channel</p><p>_urls yes。</p><p>2、将如下内容替换到C:\Users\用户名.condarc文件中。</p><p>channels:</p><p> - defaults</p><p>show_channel_urls: true</p><p>default_channels:</p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</a></p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</a></p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</a></p><p>custom_channels:</p><p> conda-forge: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> msys2: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> bioconda: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> menpo: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> pytorch: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> simpleitk: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p>（5）创建虚拟环境</p><p>1、创建虚拟环境 pyspark, 基于Python 3.8</p><p>conda create -n pyspark python&#x3D;3.8</p><p>2、切换到虚拟环境内</p><p>conda activate pyspark</p><p>3、在虚拟环境内安装包</p><p>pip install pyhive pyspark jieba -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/</a></p><p>simple</p><p>安装成功示例：</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps161.jpg" alt="img"> </p><p>（三）PyCharm中配置Python解释器</p><p>（1）配置本地解释器：创建Python项目，选择conda虚拟环境PySpark中的Python.exe解释器。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps162.jpg" alt="img"> </p><p>（2）配置远程SSH Linux解释器</p><p>1、远程SSH python pyspark环境</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps163.jpg" alt="img"> </p><p>2、添加新的远程连接</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps164.jpg" alt="img"><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps165.jpg" alt="img"> </p><p>3、设置虚拟的python环境路径</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps166.jpg" alt="img"> </p><p>（四）WordCount应用实战</p><p>可以选择在本地的PySpark环境中执行spark代码，也可以选择在虚拟机环境PySpark中执行。选择本地的就是使用conda环境，应用其中的PySpark环境执行，来读取本地文件，完成单词计数的实例。选择远程虚拟机中的PySpark环境，需要SSH连接到服务器（这里需要安装Pycharm专业版），注意：无论是选择那种方案，都是在PyCharm软件中去执行，完成上述过程。</p><p>（1）WordCount代码本地执行</p><p>准备pyspark代码以及本地文件words.txt，在PyCharm中执行。</p><p># coding:utf8</p><p>from pyspark import SparkConf, SparkContext</p><p># import os</p><p>import os</p><p>os.environ[‘PYSPARK_PYTHON’]&#x3D;’D:\anaconda3\envs\pyspark\python.exe’</p><p>os.environ [‘JAVA_HOME’] &#x3D; ‘D:\Java\jdk1.8.0_241’</p><p>#os.environ[‘PYSPARK_PYTHON’]&#x3D;’&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;envs&#x2F;pyspark&#x2F;bin&#x2F;python3.8’</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:</p><p>  conf &#x3D; SparkConf().setAppName(“WordCountHelloWorld”).setMaster(“local[*]”)</p><p>  # 通过SparkConf对象构建SparkContext对象</p><p>  sc &#x3D; SparkContext(conf&#x3D;conf)</p><p>  # 需求 : wordcount单词计数, 读取HDFS上的words.txt文件, 对其内部的单词统计出现 的数量</p><p>  # 读取文件</p><p>  #file_rdd &#x3D; sc.textFile(“hdfs:&#x2F;&#x2F;node1:8020&#x2F;input&#x2F;words.txt”)</p><p>  #file_rdd &#x3D; sc.textFile(“file:&#x2F;&#x2F;&#x2F;tmp&#x2F;pycharm_project_621&#x2F;data&#x2F;words.txt”)</p><p>  file_rdd &#x3D; sc.textFile(“D:\数据挖掘与分析实验报告合集\pyspark\data\input\words.txt”)</p><p>  # 将单词进行切割, 得到一个存储全部单词的集合对象</p><p>  words_rdd &#x3D; file_rdd.flatMap(lambda line: line.split(“ “))</p><p>  # 将单词转换为元组对象, key是单词, value是数字1</p><p>  words_with_one_rdd &#x3D; words_rdd.map(lambda x: (x, 1))</p><p>  # 将元组的value 按照key来分组, 对所有的value执行聚合操作(相加)</p><p>  result_rdd &#x3D; words_with_one_rdd.reduceByKey(lambda a, b: a + b)</p><p>  # 通过collect方法收集RDD的数据打印输出结果</p><p>print(result_rdd.collect())</p><p>运行结果截图：</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps167.jpg" alt="img"> </p><p>（2）WordCount代码远程服务器上执行。</p><p>通过SSH连接到远程服务器上，详见上述操作。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps168.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps169.jpg" alt="img"> </p><p>完成与服务器连接后，会在服务器中的&#x2F;tmp文件夹下新建了pycharm_project_xxx文件夹用于放置本地的同步代码。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps170.jpg" alt="img"> </p><p>（3）读取HDFS上的文件</p><p>1、将读取文件路径改为hdfs上的&#x2F;input&#x2F;words.txt</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps171.jpg" alt="img"> </p><p>2、在hdfs上新建&#x2F;input文件夹，使用命令hadoop fs -mkdir &#x2F;input</p><p>3、上传words.txt到hdfs中，使用命令hadoop fs -put words.txt &#x2F;input&#x2F;</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps172.jpg" alt="img"> </p><p>4、在pycharm中执行spark代码</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps173.jpg" alt="img"> </p><p>（五）spark-submit作业提交</p><p>（1）local本地模式</p><p>首先将helloword.py程序放到&#x2F;root&#x2F;目录下，使用命令bin&#x2F;spark-submit –master local[*] &#x2F;root&#x2F;helloworld.py完成提交作业。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps174.jpg" alt="img"> </p><p>（2）spark on yarn模式</p><p>使用命令bin&#x2F;spark-submit –master yarn &#x2F;root&#x2F;helloworld.py完成提交作业。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps175.jpg" alt="img"> </p><p>（3）使用历史服务器查看任务执行情况 node1:18080</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps176.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps177.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（pyspark基础编码环境）&quot;&gt;&lt;a href=&quot;#spark（pyspark基础编码环境）&quot; class=&quot;headerlink&quot; title=&quot;spark（pyspark基础编码环境）&quot;&gt;&lt;/a&gt;&lt;strong&gt;spark（pyspark基础编码环</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark（local）配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:12:06.000Z</published>
    <updated>2023-06-09T00:58:26.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（local环境部署）"><a href="#spark（local环境部署）" class="headerlink" title="spark（local环境部署）"></a>spark（local环境部署）</h2><p>（1）安装Anaconda</p><p>上传安装包 sh .&#x2F;Anaconda3-2021.05-Linux-x86_64.sh</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps37.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps38.jpg" alt="img"></p><p>出现（base)即为安装成功</p><p>（2）创建虚拟环境</p><p>conda create -n pyspark python&#x3D;3.8</p><p>conda activate pyspark</p><p>pip install pyhive pyspark jieba -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn</a></p><p>&#x2F;simple</p><p>（3）修改环境变量配置Spark由如下5个环境变量需要设置</p><p>SPARK_HOME: 表示Spark安装路径在哪里 </p><p>PYSPARK_PYTHON: 表示Spark想运行Python程序, 那么去哪里找python执行器。 </p><p>JAVA_HOME: 告知Spark Java在哪里 </p><p>HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件在哪里 </p><p>HADOOP_HOME: 告知Spark  Hadoop安装在哪里</p><p>这5个环境变量 都需要配置在: &#x2F;etc&#x2F;profile中！</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps39.jpg" alt="img"> </p><p>（4）解压</p><p>解压下载的Spark安装包</p><p>tar -zxvf spark-3.2.0-bin-hadoop3.2.tgz -C &#x2F;export&#x2F;server&#x2F;</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps40.jpg" alt="img"></p><p>设置软连接</p><p>ln -s &#x2F;export&#x2F;server&#x2F;spark-3.2.0-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark</p><p>（5）测试</p><p>bin&#x2F;pyspark</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps41.jpg" alt="img">如图：</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps42.jpg" alt="img"> </p><p>sc.parallelize([1,2,3,4,5]).map(lambda x: x + 1).collect()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（local环境部署）&quot;&gt;&lt;a href=&quot;#spark（local环境部署）&quot; class=&quot;headerlink&quot; title=&quot;spark（local环境部署）&quot;&gt;&lt;/a&gt;spark（local环境部署）&lt;/h2&gt;&lt;p&gt;（1）安装Anaconda&lt;</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Docker%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Docker%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:11:03.000Z</published>
    <updated>2023-06-09T01:12:26.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、<strong>安装docker</strong></h2><p>（1）卸载（可选）</p><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><p>yum remove docker \</p><p>​         docker-client \</p><p>​         docker-client-latest \</p><p>​         docker-common \</p><p>​         docker-latest \</p><p>​         docker-latest-logrotate \</p><p>​         docker-logrotate \</p><p>​         docker-selinux \</p><p>​         docker-engine-selinux \</p><p>​         docker-engine \</p><p>​         docker-ce</p><p>（2）yum源配置</p><p>1.备份配置文件</p><p>1）mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS</p><p>-Base.repo.backup</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps65.jpg" alt="img"> </p><p>2）wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun</a></p><p>.com&#x2F;repo&#x2F;Centos-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps66.jpg" alt="img"> </p><p>3）wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo">http://mirrors.aliyun.com/rep</a></p><p>o&#x2F;epel-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps67.jpg" alt="img"> </p><p>4）yum clean all</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps68.jpg" alt="img"> </p><p>5）yum makecache</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps69.jpg" alt="img"> </p><p>6）yum install -y bash-completion vim lrzsz wget expect net-tools nc nmap treedos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc ntpdate openldap-devel</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps70.jpg" alt="img"> </p><p><em><strong>*安装docker*</strong></em></p><p>（1）受限需要虚拟机联网，安装yum工具</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps71.jpg" alt="img"> </p><p>（2）配置网卡转发</p><p>1）docker必须安装在centos7平台，内核版本不低于3.10在centos平台运行docker可能会遇见些告警信息，修改内核配置参数，打开内核转发功能</p><p>#写入</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps72.jpg" alt="img"> </p><p>2）重新加载内核参数</p><p>modprobe br_netfilter</p><p>sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;docker.conf</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps73.jpg" alt="img"> </p><p>（3）利用yum进行docker安装</p><p>提前配置好yum仓库</p><p>1）阿里云自带仓库</p><p>curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;Centos-7.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/</a></p><p>Centos-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps74.jpg" alt="img"> </p><p> 2）阿里云提供的docker专属repo仓库</p><p>curl-o&#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps75.jpg" alt="img"> </p><p>3）更新yum缓存</p><p>yum clean all &amp;&amp; yum makecache</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps76.jpg" alt="img"> </p><p>4）查看源中可用版本</p><p>yum list docker-ce –showduplicates | sort -r</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps77.jpg" alt="img"> </p><p>5）yum安装</p><p>yum install docker-ce -y</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps78.jpg" alt="img"> </p><p>docker -v</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps79.jpg" alt="img"> </p><p>卸载</p><p>yum remove -y docker-ce-xxx</p><p>（4）配置镜像加速器</p><p>用于加速镜像文件下载,选用阿里云镜像站</p><p>1）mkdir -p &#x2F;etc&#x2F;docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps80.jpg" alt="img"> </p><p>\1. touch &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps81.jpg" alt="img"> </p><p>2）进入文件vim &#x2F;etc&#x2F;docker&#x2F;daemon.json编写以下内容：</p><p>{</p><p>“registry-mirrors” : [</p><p>“<a href="https://8xpk5wnt.mirror.aliyuncs.com/">https://8xpk5wnt.mirror.aliyuncs.com</a>“</p><p>]</p><p>}</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps82.jpg" alt="img"> </p><p>（5）启动docker</p><p>1）关闭防火墙：systemctl stop firewalld</p><p>2）禁止开机启动防火墙：systemctl disable firewalld</p><p>3）查看防火墙状态：systemctl status firewalld</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps83.jpg" alt="img"> </p><p>通过命令启动docker：</p><p>systemctl start docker  启动docker服务</p><p>systemctl stop docker  停止docker服务</p><p>systemctl restart docker  重启docker服务</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps84.jpg" alt="img"> </p><p>docker配置文件重新加载：systemctl daemon-reload</p><p>设置开启自启动：systemctl enable docker</p><p>（6）查看docker信息：docker info</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps85.jpg" alt="img"> </p><p>（7）显示当前正在运行的容器：docker ps</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps86.jpg" alt="img"> </p><p>（8）docker镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps87.jpg" alt="img"> </p><p>（9）docker版本：docker version</p><p>docker-client</p><p>which docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps88.jpg" alt="img"> </p><p>docker daemon，运行在docker host上，负责创建、运行、监控容器、构建、存储镜像</p><p>ps aux |grep docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps89.jpg" alt="img"> </p><p>containerd</p><p>ps aux|grep containerd</p><p>systemctl status containerd</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps90.jpg" alt="img"> </p><p><em><strong>*docker的基本操作*</strong></em></p><p>\1. 启动第一个docker容器</p><p>Nginx web服务器，运行一个80端口的网站</p><p>在宿主机上，运行Nginx</p><p>开启服务器</p><p>2.在服务器上安装好运行nginx所需的依赖关系</p><p>3.安装nginx yum install nginx -y</p><p>4.修改nginx配置文件</p><p>5.启动nginx</p><p>6.客户端去访问nginx</p><p>（1）查看本地的docker镜像有哪些：docker image ls 或 docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps91.jpg" alt="img"> </p><p>（2）可选择删除旧版本：docker rmi 镜像id</p><p>（3）搜索一下远程仓库中的镜像文件是否存在：docker search nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps92.jpg" alt="img"> </p><p>（4）docker pull nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps93.jpg" alt="img"> </p><p>（5）再次查看镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps94.jpg" alt="img"> </p><p>（6）运行镜像，运行出具体内容，在容器中就跑着一个nginx服务，docker run 参数 镜像的名字&#x2F;id</p><p>#-d 后台运行容器</p><p>#-p 80:80 端口映射，宿主机端口：容器内端口，访问宿主机的80端口，也就访问到容器中的80端口，会返回一个容器的id</p><p>docker run -d -p 80:80 nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps95.jpg" alt="img"> </p><p>（7）查看容器是否在运行：docker ps</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps96.jpg" alt="img"> </p><p>（8）访问网站192.168.88.163:80</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps97.jpg" alt="img"> </p><p>（9）停止容器：docker stop 容器id</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps98.jpg" alt="img"> </p><p>（10）恢复容器：docker start 容器id</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps99.jpg" alt="img"> </p><p><em><strong>*docker镜像原理*</strong></em></p><p>（1）查看发行版： cat &#x2F;etc&#x2F;redhat-release </p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps100.jpg" alt="img"> </p><p>（2）查看内核：uname -r</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps101.jpg" alt="img"> </p><p>（3）利用docker获取不同的发行版镜像（例如centos：7.8.2003）：docker pull centos:7.8.2003</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps102.jpg" alt="img"> </p><p>（4）确认当前宿主机的发行版：cat &#x2F;etc&#x2F;redhat-release</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps103.jpg" alt="img"> </p><p>（5）运行centos:7.8.2003发行版本</p><p>#运行容器，且进入容器内部</p><p>#参数解释，-i 交互式命令操作 -t 开启一个终端 bash 进入容器后执行的命令</p><p>docker run -it afb6fca791e0 bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps104.jpg" alt="img"> </p><p>（6）退出容器空间：exit</p><p><em><strong>*获取镜像*</strong></em></p><p>（1）docker search 镜像名:tag tag就是具体的标签版本：docker search centos</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps105.jpg" alt="img"> </p><p>（2）查看docker镜像的存储路径：docker info |grep Root</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps106.jpg" alt="img"> </p><p>（3）具体位置：ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;imagedb&#x2F;content&#x2F;sha256</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps107.jpg" alt="img"> </p><p>（4）使用不同的镜像，生成容器# -it 开启一个交互式的终端–rm 容器退出时删除该容器</p><p>#再运行一个7.8centos</p><p>docker run -it –rm centos bash</p><p><em><strong>*查看镜像*</strong></em></p><p>（1）查看所有镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps108.jpg" alt="img"> </p><p>（2）指定tag查看：docker images centos:7.8.2003</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps109.jpg" alt="img"> </p><p>（3）只列出镜像id  #-q –quiet 只列出id：docker images -q</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps110.jpg" alt="img"> </p><p>（4）格式化显示镜像</p><p># 这是docker的模板语言，–format</p><p>docker images –format “{ {.ID} }–{ {.Repository} }”</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps111.jpg" alt="img"> </p><p><em><strong>*删除镜像*</strong></em></p><p>（1）删除容器记录：docker rm 容器id</p><p>（2）指定id的前三位即可：docker rmi 镜像id</p><p><em><strong>*镜像管理*</strong></em></p><p>（1）批量删除镜像，慎用：docker rmi ‘docker images -aq’</p><p>（2）批量删除容器：docker rm ‘docker ps -aq’</p><p>（3）导出镜像：docker save -o nginx.tgz nginx:latest#打包tar包</p><p>（4）导入镜像：</p><p>①先删除本地的nginx镜像：docker rmi centos:7.8.2003</p><p>②docker image load -i &#x2F;export&#x2F;software&#x2F;centos1.8.2003.tgz#重新加载nginx-tar包</p><p>③查看cocker服务的信息：docker info</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps112.jpg" alt="img"> </p><p>④查看镜像详细信息：docker image inspact 镜像id</p><p><em><strong>*docker镜像管理练习*</strong></em></p><p>（1）去DockerHub搜索Redies</p><p>（2）利用docker pull命令拉去镜像：docker pull redis</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps113.jpg" alt="img"> </p><p>（3）查看Redies镜像的名称和版本：docker search redis</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps114.jpg" alt="img"> </p><p>（4）利用docker save命令将redies:latest打包为一个redies.tar包</p><p>docker save -o redis.tar redis:latest</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps115.jpg" alt="img"> </p><p>（5）利用docker rmi删除本地的redis:latest </p><p>docker rmi redis:latest</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps116.jpg" alt="img"> </p><p>（6）利用docker load重新加载Redis.tar文件</p><p>docker load -i redis.tar</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps117.jpg" alt="img"> </p><p><em><strong>*容器操作*</strong></em></p><p>\1. 创建并运行mn容器</p><p>docker run –name mn -p 80:80 -d nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps118.jpg" alt="img"> </p><p>\2. 运行刚刚创建的nginx容器</p><p>docker exec -it mn bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps119.jpg" alt="img"> </p><p>\3. 进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p>cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps120.jpg" alt="img"> </p><p>\4. 修改index.html的内容</p><p>sed -i -e ‘s#Welcome to nginx#人工智能学院欢迎您#g’ -e ‘s#<head>#<head><meta charset="utf-8">#g’ index.html</head></head></p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps121.jpg" alt="img"> </p><p><em><strong>*创建和查看数据卷*</strong></em></p><p>\1. 创建数据卷</p><p>docker volume create html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps122.jpg" alt="img"> </p><p>\2. 查看所有数据</p><p>docker volume ls</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps123.jpg" alt="img"> </p><p>\3. 查看数据卷详细信息卷</p><p>docker volume inspect html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps124.jpg" alt="img"> </p><p>\4. 挂载数据卷</p><p>（1）创建容器并挂载数据卷到容器内的HTML目录，把&#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;数据卷挂载到容器内的&#x2F;user&#x2F;share&#x2F;nginx&#x2F;html目录中：</p><p>docker run –name mn -v &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -p 80:80 -d nginx</p><p>（2）进入html数据卷所在位置，并修改HTML内容</p><p>查看html数据卷的位置：</p><p>docker volume inspect &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;</p><p>（3）进入该目录</p><p>cd &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;_data</p><p>（4）修改文件vi index.html</p><p><em><strong>*Docker应用部署*</strong></em></p><p>\1. 搜索mysql镜像：docker search mysql</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps125.jpg" alt="img"> </p><p>\2. 拉取mysql镜像</p><p>docker pull mysql:5.6</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps126.jpg" alt="img"> </p><p>\3. 创建容器，设置端口映射、目录映射</p><p>mkdir -p &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;mysql</p><p>cd &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;mysql</p><p>docker run -id \</p><p>-p 3306:3306 \</p><p>–name&#x3D;bigdata_mysql \</p><p>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \</p><p>-v $PWD&#x2F;logs:&#x2F;logs \</p><p>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;hadoop \</p><p>mysql:5.7.29</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps127.jpg" alt="img"> </p><p>\4. 进入容器，操作mysql</p><p>docker exec –it bigdata_mysql &#x2F;bin&#x2F;bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps128.jpg" alt="img"> </p><p>\5. 使用外部机器连接容器中的mysql</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps129.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;安装docker&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）卸载（可选）&lt;/p&gt;
&lt;p&gt;如果之前</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Docker" scheme="http://ssyyxx123.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Git%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Git%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:10:53.000Z</published>
    <updated>2023-06-09T01:12:38.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a><strong>Git安装</strong></h2><p>（1）Git下载</p><p>核心程序</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps41.jpg" alt="img"> </p><p>（2）可视化客户端</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps42.jpg" alt="img"> </p><p>中文语言包</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps43.jpg" alt="img"> </p><p>（3）初始化仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps44.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps45.jpg" alt="img"> </p><p>（4）添加文件，提交文件至本地仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps46.jpg" alt="img"> </p><p>（5）本地删除与恢复</p><p>文件选中删除，可用以下方式还原</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps47.jpg" alt="img"> </p><p>（6）创建分支</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps48.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps49.jpg" alt="img"> </p><p>（7）分支的查看切换</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps50.jpg" alt="img"> </p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/06/09/Git%E9%85%8D%E7%BD%AE/wps52.jpg" class title="img](.&#x2F;&#x2F;Git配置&#x2F;wps51.jpg)![img"> <p>（8）标签的创建</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps53.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps54.jpg" alt="img"> </p><p>（9）切换与删除</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps55.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps56.jpg" alt="img"> </p><p>通过右键选中删除</p><p><em><strong>*远程仓库*</strong></em></p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps57.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps58.jpg" alt="img"> </p><p>（1）码云账号注册</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps59.jpg" alt="img"> </p><p>填写邮箱发送验证码,然后可以注册账号,主页如下</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps60.jpg" alt="img"> </p><p>（2）创建远程仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps61.jpg" alt="img"> </p><p>（3）把本地代码推送到远端</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps62.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps63.jpg" alt="img"> </p><p>生成公钥私钥</p><p>ssh-keygen -t rsa</p><p>一直回车</p><p>会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</p><p>密钥配置</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps64.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;Git安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）Git下载&lt;/p&gt;
&lt;p&gt;核心程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/20</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Git" scheme="http://ssyyxx123.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hive配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Hive%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Hive%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:10:43.000Z</published>
    <updated>2023-06-09T00:36:05.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a><strong>Hive安装</strong></h2><p>（1）Mysql安装</p><p>1）卸载Centos7自带的mariadb</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps21.jpg" alt="img"> </p><p>如果出现了mariadb-libs-5.5.64-1.el7.x86_64，输入rpm -e mariadb- libs-5.5.64-1.el7.x86_64 –nodeps,在输入rpm -qa|grep mariadb，即可</p><p>2）安装mysql</p><p>新建文件夹：mkdir &#x2F;export&#x2F;server&#x2F;mysql</p><p>上传mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar到上述文件夹下，解压tar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps22.jpg" alt="img"> </p><p>3）执行安装</p><p>yum -y install libaio</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps23.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps24.jpg" alt="img"> </p><p>4）mysql初始化设置</p><p>初始化：mysqld –initialize</p><p>更改所属组：chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R</p><p>启动mysql：systemctl start mysqld.service</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps25.jpg" alt="img"> </p><p>查看临时生成的root密码：cat  &#x2F;var&#x2F;log&#x2F;mysqld.log</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps26.jpg" alt="img"> </p><p>5）修改root密码 授权远程访问 设置开机自启动</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps27.jpg" alt="img"> </p><p>修改root密码 设置为hadoop</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps28.jpg" alt="img"> </p><p>授权</p><p>use mysql;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘hadoop’ WITH GRANT OPTION;</p><p>FLUSH PRIVILEGES;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps29.jpg" alt="img"> </p><p>mysql的启动和关闭 状态查看 （这几个命令必须记住）</p><p>systemctl stop mysqld</p><p>systemctl status mysqld</p><p>systemctl start mysqld</p><p>设置开机自动启动：systemctl enable  mysqld </p><p>查看是否设置自动启动成功</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps30.jpg" alt="img"> </p><p><em><strong>*（2）*</strong></em><em><strong>*H*</strong></em><em><strong>*ive*</strong></em><em><strong>*的安装*</strong></em></p><p>1）上传安装包 解压</p><p>tar zxvf apache-hive-3.1.2-bin.tar.gz</p><p>ln -s apache-hive-3.1.2-bin hive</p><p>2）解决Hive与Hadoop之间guava版本差异</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;</p><p>rm -rf lib&#x2F;guava-19.0.jar</p><p>cp &#x2F;export&#x2F;server&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-27.0-jre.jar</p><p> .&#x2F;lib&#x2F;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps31.jpg" alt="img"> </p><p>3）修改配置文件</p><p>hive-env.sh</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;conf</p><p>mv hive-env.sh.template hive-env.sh</p><p>vim hive-env.sh</p><p>export HADOOP_HOME&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop</p><p>export HIVE_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hive&#x2F;conf</p><p>export HIVE_AUX_JARS_PATH&#x3D;&#x2F;export&#x2F;server&#x2F;hive&#x2F;lib</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps32.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps33.jpg" alt="img"> </p><p>hive-site.xml</p><p>vim hive-site.xml</p><configuration><!-- 存储元数据mysql相关配置 --><property><p>​<name>javax.jdo.option.ConnectionURL</name></p><p>​<value>jdbc:mysql:&#x2F;&#x2F;node1:3306&#x2F;hive3?createDatabaseIfNotExist&#x3D;true&amp;useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</value></p></property><property><p>​<name>javax.jdo.option.ConnectionDriverName</name></p><p>​<value>com.mysql.jdbc.Driver</value></p></property><property><p>​<name>javax.jdo.option.ConnectionUserName</name></p><p>​<value>root</value></p></property><property><p>​<name>javax.jdo.option.ConnectionPassword</name></p><p>​<value>hadoop</value></p></property><!-- H2S运行绑定host --><property><p>  <name>hive.server2.thrift.bind.host</name></p><p>  <value>node1</value></p></property><!-- 远程模式部署metastore metastore地址 --><property><p>  <name>hive.metastore.uris</name></p><p>  <value>thrift:&#x2F;&#x2F;node1:9083</value></p></property><!-- 关闭元数据存储授权  --> <property><p>  <name>hive.metastore.event.db.notification.api.auth</name></p><p>  <value>false</value></p></property></configuration><p>4）上传mysql jdbc驱动到hive安装包lib下</p><p>mysql-connector-java-5.1.32.jar</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps34.jpg" alt="img"> </p><p>5）初始化元数据</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;</p><p>bin&#x2F;schematool -initSchema -dbType mysql -verbos</p><p>初始化成功之后会在MySQL中创建74张表</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps35.jpg" alt="img"> </p><p>6）在hdfs创建hive存储目录（如存在则不用操作）</p><p>hadoop fs -mkdir &#x2F;tmp</p><p>hadoop fs -mkdir -p &#x2F;user&#x2F;hive&#x2F;warehouse</p><p>hadoop fs -chmod g+w &#x2F;tmp</p><p>hadoop fs -chmod g+w &#x2F;user&#x2F;hive&#x2F;warehouse</p><p>7）启动hive</p><p><em><strong>*（*</strong></em><em><strong>*3）*</strong></em><em><strong>*启动metastore服务*</strong></em> 前台启动  关闭ctrl+c</p><p>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps36.jpg" alt="img"> </p><p>前台启动开启debug日志</p><p>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore –hiveconf hive.root.logger&#x3D;DEBUG,console  </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps37.jpg" alt="img"> </p><p>后台启动 进程挂起  关闭使用jps+ kill -9</p><p>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps38.jpg" alt="img"> </p><p><em><strong>*（*</strong></em><em><strong>*4）*</strong></em><em><strong>*启动hiveserver2服务*</strong></em></p><p>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service hiveserver2 &amp;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps39.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps40.jpg" alt="img"> </p><p>beeline客户端连接</p><p>拷贝node1安装包到beeline客户端机器上（node3）</p><p>scp -r &#x2F;export&#x2F;server&#x2F;apache-hive-3.1.2-bin&#x2F; root@node3:&#x2F;export&#x2F;server&#x2F;</p><p><em><strong>*（5）*</strong></em><em><strong>*hive注释信息中文乱码解决*</strong></em></p><p>以下sql语句均在mysql数据库中执行</p><p>use hivenode2;</p><p>show tables;</p><p>alter table hivenode2.COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;</p><p>alter table hivenode2.TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p><p>alter table hivenode2.PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8 ;</p><p>alter table hivenode2.PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</p><p>alter table hivenode2.INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hive安装&quot;&gt;&lt;a href=&quot;#Hive安装&quot; class=&quot;headerlink&quot; title=&quot;Hive安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;Hive安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）Mysql安装&lt;/p&gt;
&lt;p&gt;1）卸载Centos7自带的maria</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Hive" scheme="http://ssyyxx123.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Spark（stand-alone）配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-07T11:21:51.000Z</published>
    <updated>2023-06-09T00:47:00.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（StandAlone环境部署）"><a href="#spark（StandAlone环境部署）" class="headerlink" title="spark（StandAlone环境部署）"></a><strong>spark（StandAlone环境部署）</strong></h2><p>（一）、集群规划：选择三台机器分别为node1、node2、node3来组成集群环境。</p><p>其中node1上安装master和worker进程；node2上安装worker进程；node3上安装worker进程。</p><p>（二）、anaconda on linux安装过程：</p><p>（1）前提：在linux服务器node1、node2、node3上都安装python(anaconda)。并安装pyspark虚拟环境。具体安装步骤如下。</p><p>1、在&#x2F;export&#x2F;server&#x2F;目录下上传anaconda的安装包Anaconda3-2021.</p><p>05-Linux-x86_64.sh。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps56.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps57.jpg" alt="img"> </p><p>2、安装anaconda 使用命令：sh .&#x2F;Anaconda3-2021.05-Linux-x86_64.sh</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps58.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps59.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps60.jpg" alt="img"> </p><p>3、安装完毕之后若没有出现base环境，进行如下配置。在&#x2F;root&#x2F;.condarc添加国内源</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps61.jpg" alt="img"> </p><p>安装完毕后，关闭服务器重新启动，出现base环境即安装成功。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps62.jpg" alt="img"> </p><p>（2）在anaconda中，安装pyspark虚拟环境。</p><p>1、基于python3.8安装pyspark环境。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps63.jpg" alt="img"> </p><p>2、切换到pyspark中，并安装所需要的安装包。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps64.jpg" alt="img"> </p><p>注：在node1、node2、node3三台服务器上都完成配置！</p><p>（三）、StandAlone模式部署</p><p>（1）安装spark压缩文件。</p><p>1、进入到&#x2F;export&#x2F;server&#x2F;中上传并解压spark-3.2.0-bin-hadoop3.2.tgz。并设置软链接，命令为ln-s&#x2F;export&#x2F;server&#x2F;spark-3.2.0-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark。</p><p>（2）在&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf，配置文件。</p><p>1、首先在配置workers文件。mv workers.template workers；vim workers；</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps65.jpg" alt="img"> </p><p>2.配置spark-env.sh文件。mv spark-env.sh.template spark-env.sh；</p><p>Vim spark-env.sh，添加如下内容。</p><p>## 设置JAVA安装目录</p><p>JAVA_HOME&#x3D;&#x2F;export&#x2F;server&#x2F;jdk</p><p>## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</p><p>HADOOP_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p><p>YARN_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p><p>## 指定spark老大Master的IP和提交任务的通信端口</p><p># 告知Spark的master运行在哪个机器上</p><p>export SPARK_MASTER_HOST&#x3D;node1</p><p># 告知sparkmaster的通讯端口</p><p>export SPARK_MASTER_PORT&#x3D;7077</p><p># 告知spark master的 webui端口</p><p>SPARK_MASTER_WEBUI_PORT&#x3D;8080</p><p># worker cpu可用核数</p><p>SPARK_WORKER_CORES&#x3D;1</p><p># worker可用内存</p><p>SPARK_WORKER_MEMORY&#x3D;1g</p><p># worker的工作通讯地址</p><p>SPARK_WORKER_PORT&#x3D;7078</p><p># worker的 webui地址</p><p>SPARK_WORKER_WEBUI_PORT&#x3D;8081</p><p>## 设置历史服务器</p><p># 配置的意思是  将spark程序运行的历史日志 存到hdfs的&#x2F;sparklog文件夹中</p><p>SPARK_HISTORY_OPTS&#x3D;”-Dspark.history.fs.logDirectory&#x3D;hdfs:&#x2F;&#x2F;node1:8020&#x2F;sparklog&#x2F; -Dspark.history.fs.cleaner.enabled&#x3D;true”</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps66.jpg" alt="img"> </p><p>3、在HDFS上创建程序运行历史记录存放的文件夹。</p><p>hadoop fs -mkdir &#x2F;sparklog；hadoop fs -chmod 777 &#x2F;sparklog</p><p>4、配置spark-defaults.conf文件。mv spark-defaults.conf.template spark-defaults.conf；vim spark-defaults.conf，添加如下内容。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps67.jpg" alt="img"> </p><p>5、配置log4j.properties 文件[可选配置]。mv log4j.properties.template log4j.properties；修改配置，设置级别为WARN 只输出警告和错误日志。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps68.jpg" alt="img"> </p><p>（四）、将spark分发到node2和node3服务器上。注意同时要设置软链接。</p><p>scp -r spark-3.1.2-bin-hadoop3.2 node2:&#x2F;export&#x2F;server&#x2F;</p><p>scp -r spark-3.1.2-bin-hadoop3.2 node3:&#x2F;export&#x2F;server&#x2F;</p><p>ln -s &#x2F;export&#x2F;server&#x2F;spark-3.1.2-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark</p><p>注意：配置&#x2F;etc&#x2F;profile，JAVA_HOME；SPARK_HOME；PYSPARK_PYTHON都指向正确的目录。</p><p>（五）、启动历史服务器，启动Spark的Master和Worker进程</p><p>（1）启动历史服务器：sbin&#x2F;start-history-server.sh</p><p>（2）启动全部的master和worker：sbin&#x2F;start-all.Sh</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps69.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps70.jpg" alt="img"><img src="file:///C:\Users\86130\AppData\Local\Temp\ksohtml5236\wps71.jpg" alt="img"> </p><p>（六）、查看Master的WEB UI 在浏览器中输入node1:8080</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps72.jpg" alt="img"> </p><p>（七）、连接到StandAlone集群</p><p>（1）通过master来连接到StandAlone集群。</p><p>bin&#x2F;pyspark –master spark:&#x2F;&#x2F;node1:7077</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps73.jpg" alt="img"> </p><p>（2）使用spark-shell连接StandAlone集群。</p><p>bin&#x2F;spark-shell –master spark:&#x2F;&#x2F;node1:7077，进行测试。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps74.jpg" alt="img"> </p><p>（3）使用spark-submit(PI)提交任务到集群上执行。bin&#x2F;spark-submit –master spark:&#x2F;&#x2F;node1:7077&#x2F;export&#x2F;server&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;Pytho</p><p>n&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps75.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps76.jpg" alt="img"> </p><p>查看历史服务器：在浏览器中输入node1：18080</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps77.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（StandAlone环境部署）&quot;&gt;&lt;a href=&quot;#spark（StandAlone环境部署）&quot; class=&quot;headerlink&quot; title=&quot;spark（StandAlone环境部署）&quot;&gt;&lt;/a&gt;&lt;strong&gt;spark（StandAlon</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark HA &amp; Yarn配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-07T11:21:42.000Z</published>
    <updated>2023-06-08T11:07:15.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spark-StandAlone-HA-环境搭建"><a href="#一、Spark-StandAlone-HA-环境搭建" class="headerlink" title="一、Spark StandAlone HA 环境搭建"></a>一、Spark StandAlone HA 环境搭建</h1><p>1、首先进入spark-env.sh中，vim &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps1.jpg" alt="img"> </p><p>2、在spark-env.sh配置文件中删除 export SPARK_MASTER_HOST&#x3D;node1</p><p>（目的是不然机器知道固定的master是谁，不然无法进行master切换）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps2.jpg" alt="img"> </p><p>3、在spark-env.sh配置文件中增加以下内容：</p><p>SPARK_DAEMON_JAVA_OPTS&#x3D;”-Dspark.deploy.recoveryMode&#x3D;ZOOKEEPER -Dspark.deploy.zookeeper.url&#x3D;node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir&#x3D;&#x2F;spark-ha”</p><p># spark.deploy.recoveryMode 指定HA模式 基于Zookeeper实现</p><p># 指定Zookeeper的连接地址</p><p># 指定在Zookeeper中注册临时节点的路径</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps3.jpg" alt="img"> </p><p>4、将spark-env.sh配置文件分发给node2、node3。</p><p>scp -r &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh node2:&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;</p><p>scp -r &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh node3:&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps4.jpg" alt="img"> </p><p>5、启动StandAlone集群、zookeeper集群：</p><p>①在node1上：sbin&#x2F;start-all.sh</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps5.jpg" alt="img"> </p><p>②在node2上：sbin&#x2F;start-master.sh</p><p>（目的是：备用master，当kill掉node1的master后，程序依然能进行）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps6.jpg" alt="img"> </p><p>6、查看node1、node2的WEB UI</p><p>（如果8080端口被占用了，可以顺延到8081、8082端口，</p><p>其中node1上的master是alive的，node2上的是standby） </p><p>node1:8080–&gt;8081   </p><p>node2:8080–&gt;8081\8082</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps7.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps8.jpg" alt="img"> </p><p>7、Master主备切换，在&#x2F;export&#x2F;server&#x2F;spark路径下提交一个任务到当前alive master上:</p><p>bin&#x2F;spark-submit –master spark:&#x2F;&#x2F;node1:7077 \</p><p>&#x2F;export&#x2F;server&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 1000</p><p>（在提交成功后, 将alive master直接kill掉，系统不会中断，仍然能正常运行结果）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps9.jpg" alt="img"> </p><p>8、查看Master的WEB UI，只有node2是alive的，证明master切换成功</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps10.jpg" alt="img">二、Spark On YARN 环境搭建</p><p>1、Client模式中driver运行在客户端，在客户端显示输出结果，但是在spark历史服务器不显示logs信息。</p><p>2、Cluster模式中driver运行在YARN容器内部，和ApplicationMaster在同一个容器内，在客户端不显示输出结果，所以在spark历史服务器中显示logs的信息。</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps11.jpg" alt="img"> </p><p>3、client模式测试</p><p>bin&#x2F;spark-submit –master yarn –deploy-mode client –driver-memory 512m ${SPARK_HOME}&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps12.jpg" alt="img"> </p><p>4、 cluster模式测试</p><p>bin&#x2F;spark-submit –master yarn –deploy-mode cluster –driver-memory 512m \</p><p>–conf “spark.pyspark.driver.python&#x3D;&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;bin&#x2F;python3” \</p><p>–conf “spark.pyspark.python&#x3D;&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;bin&#x2F;python3” ${SPARK_HOME}&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps13.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Spark-StandAlone-HA-环境搭建&quot;&gt;&lt;a href=&quot;#一、Spark-StandAlone-HA-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、Spark StandAlone HA 环境搭建&quot;&gt;&lt;/a&gt;一、Spark </summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/My-New-Post/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/My-New-Post/</id>
    <published>2023-06-07T02:08:23.000Z</published>
    <updated>2023-06-07T02:08:23.661Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/hello-world/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/hello-world/</id>
    <published>2023-06-07T02:01:02.646Z</published>
    <updated>2023-06-07T02:01:02.646Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
