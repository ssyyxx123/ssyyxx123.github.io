<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ssyyxx123</title>
  
  
  <link href="http://ssyyxx123.github.io/atom.xml" rel="self"/>
  
  <link href="http://ssyyxx123.github.io/"/>
  <updated>2023-06-16T09:14:51.044Z</updated>
  <id>http://ssyyxx123.github.io/</id>
  
  <author>
    <name>syx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka-Eagle的部署和介绍</title>
    <link href="http://ssyyxx123.github.io/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/"/>
    <id>http://ssyyxx123.github.io/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-06-16T07:22:08.000Z</published>
    <updated>2023-06-16T09:14:51.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Kafka-eagle部署"><a href="#一、Kafka-eagle部署" class="headerlink" title="一、Kafka-eagle部署"></a>一、Kafka-eagle部署</h2><p>（1） 上传安装包，解压，设置软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka-eagle-web-2.0.2-bin.tar.gz</span><br><span class="line">ln -s  kafka-eagle-web-2.0.2-bin.tar.gz  kafka-eagle</span><br></pre></td></tr></table></figure><p>（2） 配置环境变量:JAVA_HOME 和 KE_HOME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile </span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export KE_HOME=/export/server/kafka-eagle</span><br><span class="line">export PATH=$PATH:$KE_HOME/bin</span><br></pre></td></tr></table></figure><p>（3） 配置 KafkaEagle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka-eagle/conf </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi system-config.properties</span><br></pre></td></tr></table></figure><p>需要更改的地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kafka.eagle.zk.cluster.alias=cluster1</span><br><span class="line"></span><br><span class="line">cluster1.zk.list=node1:2181,node2:2181,node3:2181</span><br><span class="line"></span><br><span class="line">cluster1.kafka.eagle.broker.size=3</span><br><span class="line"></span><br><span class="line">kafka.eagle.url=jdbc:sqlite:/export/data/db/ke.db</span><br></pre></td></tr></table></figure><p>（4）启动前需要手动创建&#x2F;export&#x2F;data&#x2F;db目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/db</span><br></pre></td></tr></table></figure><p>（5）启动kafka集群、zookeeper集群</p><p>（6） 启动Eagle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/kafka-eagle/bin/ke.sh start</span><br></pre></td></tr></table></figure><p>（7）安装成功实例</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616171253734.png" alt="image-20230616171253734"></p><p>（7）登录网址<a href="http://192.168.88.151:8048/">http://192.168.88.151:8048/</a></p><p>​         Account:admin ,Password:123456</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616171339688.png" alt="image-20230616171339688"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616171403223.png" alt="image-20230616171403223"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616171422704.png" alt="image-20230616171422704"></p><h3 id="二、eagle介绍"><a href="#二、eagle介绍" class="headerlink" title="二、eagle介绍"></a>二、eagle介绍</h3><p>1、Dashboard：数据面板</p><p>负责展示Kafka集群的Broker数、Topic数、Consumer数、以及Topic LogSize Top10和Topic Capacity Top10数据。</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616160311950.png"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170503279.png" alt="image-20230616170503279"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170627903.png" alt="image-20230616170627903"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170657323.png" alt="image-20230616170657323"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5al9raW5n,size_16,color_FFFFFF,t_70.png" alt="img"></p><p>2、BScreen：数据大屏</p><p>该模块包含展示消费者和生产者当日及最近7天趋势、Kafka集群读写速度、Kafka集群历史总记录等。</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616171435137.png" alt="image-20230616171435137"></p><p>3、Topic使用：</p><p>（1）Create：创建Topic</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616160713196.png" alt="image-20230616160713196"></p><p>（2）List：Topic列表</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616160740683.png" alt="image-20230616160740683"></p><p>（3）KSQL：支持sql查询页面</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616160919433.png" alt="image-20230616160919433"></p><p>（4）Mock：向Topic发送消息</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616161002098.png" alt="image-20230616161002098"></p><p>（5）Manager：主题配置</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616161134106.png" alt="image-20230616161134106"></p><p>（6）Hub：主题枢纽：</p><p>用来迁移主题数据或者平衡</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616162158401.png" alt="image-20230616162158401"></p><p>4、Consumers：消费者列表</p><p>该模块包含监控不同消费者组中的Topic被消费的详情，例如LogSize、Offsets、以及Lag等。同时，支持查看Lag的历史趋势图。</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616162439009.png" alt="image-20230616162439009"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616162505200.png" alt="image-20230616162505200"></p><p>5、Cluster：集群管理</p><p>该模块包含Kafka集群和Zookeeper集群的详情展示，例如Kafka的IP和端口、版本号、启动时间、Zookeeper的Leader和Follower。同时，还支持多Kafka集群切换，以及Zookeeper Client数据查看等功能。</p><p>（1）ZK&amp;Kafka</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616162606821.png" alt="image-20230616162606821"></p><p>（2）Mulit-Clusters：</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616162831689.png" alt="image-20230616162831689"></p><p>（3）ZkCli</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616163016336.png" alt="image-20230616163016336"></p><p>6、Metrics：监控数据指标</p><p>该模块包含监控Kafka集群和Zookeeper集群的核心指标，包含Kafka的消息发送趋势、消息大小接收与发送趋势、Zookeeper的连接数趋势等。同时，还支持查看Broker的瞬时指标数据。</p><p>（1）Brokers：</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164040315.png" alt="image-20230616164040315"></p><p>（2）Kafka：</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164225880.png" alt="image-20230616164225880"></p><p>（3）Zookeeper：</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164257939.png" alt="image-20230616164257939"></p><p>7、Connect：连接配置管理器</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164419681.png" alt="image-20230616164419681"></p><p>8、Channel：配置</p><p> 选择 不同的警告类型，用于警告使用者和群集运行状况，该模块包含告警集群异常和消费者应用Lag异常。同时，支持多种IM告警方式，例如邮件、钉钉、微信、Webhook等。</p><p>（1）Config：</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164838136.png" alt="image-20230616164838136"></p><p>（2）List：告警列表</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616164930400.png" alt="image-20230616164930400"></p><p>9、AlarmConsumer：报警消费者</p><p>（1）Add：消费积压告警</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616165427097.png" alt="image-20230616165427097"></p><p>（2）Modify：消费告警列表操作</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616165454978.png" alt="image-20230616165454978"></p><p>10、AlarmCluster：节点告警</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616165925372.png" alt="image-20230616165925372"></p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616165955880.png" alt="image-20230616165955880"></p><p>11、System：系统管理</p><p>该模块包含用户管理，例如创建用户、用户授权、资源管理等</p><p>（1）User：用户配置</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170128199.png" alt="image-20230616170128199"></p><p>（2）Role：角色配置</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170200667.png" alt="image-20230616170200667"></p><p>（3）Resource：组织结构图</p><p><img src="/2023/06/16/Kafka-Eagle%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BB%8B%E7%BB%8D/image-20230616170253421.png" alt="image-20230616170253421"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Kafka-eagle部署&quot;&gt;&lt;a href=&quot;#一、Kafka-eagle部署&quot; class=&quot;headerlink&quot; title=&quot;一、Kafka-eagle部署&quot;&gt;&lt;/a&gt;一、Kafka-eagle部署&lt;/h2&gt;&lt;p&gt;（1） 上传安装包，解压，设置软连接</summary>
      
    
    
    
    <category term="工具3" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B73/"/>
    
    
    <category term="部署" scheme="http://ssyyxx123.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Eagle" scheme="http://ssyyxx123.github.io/tags/Eagle/"/>
    
  </entry>
  
  <entry>
    <title>Kafka配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-14T05:20:55.000Z</published>
    <updated>2023-06-16T10:05:27.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka安装"><a href="#kafka安装" class="headerlink" title="kafka安装"></a><strong>kafka安装</strong></h2><p>安装Kafka集群</p><p>（1）上传安装包</p><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps126.jpg" alt="img"> </p><p>\1. 修改配置文件</p><p>修改文件内容</p><p>#进入配置文件目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka_2.12-2.4.1/config</span><br></pre></td></tr></table></figure><p>#编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi server.properties</span><br></pre></td></tr></table></figure><p>#为依次增长的:0、1、2、3、4,集群中唯一 id – 从0开始，每台不能重复，第一块要改的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0 </span><br></pre></td></tr></table></figure><p>#数据存储的目录，第二块要改的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.dirs=/export/data/kafka-logs </span><br></pre></td></tr></table></figure><p>#指定 zk 集群地址，第三块要改的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.connect=node1:2181，node2:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps127.jpg" alt="img"> </p><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps128.jpg" alt="img"> </p><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps129.jpg" alt="img"> </p><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps130.jpg" alt="img"> </p><p>（2）分发kafla</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/</span><br><span class="line"></span><br><span class="line">syncfile /export/server/kafka_2.12-2.4.1</span><br></pre></td></tr></table></figure><p>（3）配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HOME=/export/server/kafka_2.12-2.4.1 </span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin </span><br></pre></td></tr></table></figure><p>注意:还需要分发环境变量！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syncfile /etc/profile</span><br></pre></td></tr></table></figure><p>（4）在node2上修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /export/server/kafka_2.12-2.4.1/config/server.propertie</span><br></pre></td></tr></table></figure><p>更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">log.dirs=/export/data/kafka-logs</span><br></pre></td></tr></table></figure><p>（5）启动集群（各个节点）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /export/server/kafka_2.12-2.4.1/config/server.properties</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps131.jpg" alt="img"> </p><p>关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-stop.sh stop</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps132.jpg" alt="img"> </p><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps133.jpg" alt="img"> </p><p>（6）kafka命令行操作</p><p>1）创建topic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --topic tpc_1 --partitions 2 --replication-factor 2 --zookeeper node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps134.jpg" alt="img"> </p><p>2）手动指定副本的存储位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --topic tpc_1 --zookeeper node1:2181 --replica-assignment 0:1,1:2</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps135.jpg" alt="img"> </p><p>3）查看目前Kafka中的主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --list --bootstrap-server node1:9092</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps136.jpg" alt="img"> </p><p>4）查看topic</p><p>列出当前系统中的所有 topic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper node1:2181,node2:2181,node3:2181 --list</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps137.jpg" alt="img"> </p><p>5）查看 topic 详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --topic tpc_1 --zookeeper node1:2181 </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps138.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --describe --topic tpc_1 --zookeeper node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps139.jpg" alt="img"> </p><p>6）增加分区数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --alter --topic tpc_1 --partitions 3 --zookeeper node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps140.jpg" alt="img"> </p><p>7）动态配置topic 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs.sh --zookeeper node1:2181 --entity-type topics --entity-name tpc_1 --alter --add-config compression.type=gzip </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps141.jpg" alt="img"> </p><p>8）删除参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs.sh --zookeeper node1:2181 --entity-type topics --entity-name tpc_1 --alter --delete-config compression.type</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps142.jpg" alt="img"> </p><p>9）生产消息到Kafka并进行消费</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list node1:9092, node2:9092, node3:9092 --topic tpc_1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps143.jpg" alt="img"> </p><p>10）消费信息（从头开始）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server node1:9092, node2:9092, node1:9092 --topic tpc_1 --from-beginning</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps144.jpg" alt="img"> </p><p>11）指定要消费的分区,和要消费的起始 offset</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server node1:9092,node2:9092,node3:9092 --topic tcp_1 --offset 2 --partition 0</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps145.jpg" alt="img"> </p><p>12）配置管理kafka-configs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs.sh zookeeper node1: 2181 --describe --entity-type brokers --entity-name 0 --zookeeper node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps146.jpg" alt="img"> </p><p>Kafka基准测试</p><p>1.三分区，两副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --topic tpc_3 --partitions 2 --replication-factor 1 --zookeeper node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps147.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-producer-perf-test.sh --topic tpc_3 --num-records 1000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=node1:9092 acks=1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps148.jpg" alt="img"> </p><p>\2. 四分区，两副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --topic tpc_4 --partitions 2 --replication-factor 2 --zookeeper node1:2181</span><br><span class="line"></span><br><span class="line">kafka-producer-perf-test.sh --topic tpc_4 --num-records 1000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=node1:9092 acks=1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps149.jpg" alt="img"> </p><p>\3. 七分区，十二副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --topic tpc_7 --partitions 12 --replication-factor 1 --zookeeper node1:2181</span><br><span class="line"></span><br><span class="line">kafka-producer-perf-test.sh --topic tpc_7 --num-records 1000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=node1:9092 acks=1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Kafka%E9%85%8D%E7%BD%AE/wps150.jpg" alt="img"> </p><p>由此可知：在一定限度内：副本增多，吞吐量变大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kafka安装&quot;&gt;&lt;a href=&quot;#kafka安装&quot; class=&quot;headerlink&quot; title=&quot;kafka安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;kafka安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;安装Kafka集群&lt;/p&gt;
&lt;p&gt;（1）上传安装包&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="工具2" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B72/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Kafka" scheme="http://ssyyxx123.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-14T05:20:32.000Z</published>
    <updated>2023-06-16T09:57:22.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a><strong>zookeeper安装</strong></h2><p>安装前需要安装好jdk，检测集群时间是否同步，检测防火墙是否关闭，检测主机 ip映射有没有配置</p><p>（1）在node1上切换到 &#x2F;export&#x2F;server 目录下，上传zookeeper压缩包并解压，设置一个软连接。</p><p>切换到server目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br></pre></td></tr></table></figure><p>解压zookeeper压缩包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper.tar.gz -C /export/server/  </span><br></pre></td></tr></table></figure><p>设置软连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper.tar.gz -C /export/server/  </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps96.jpg" alt="img"> </p><p>\1. 修改环境变量（三台都修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export ZOOKEEPER_HOME=/export/server/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps97.jpg" alt="img"> </p><p>\2. 修改zookeeper配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/zookeeper/conf/  </span><br></pre></td></tr></table></figure><p>切换到conf&#x2F;目录下，cp zoo_sample.cfg zoo.cfg  复制zoo_sample.cfg文件，文件名为zoo.cfg</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps98.jpg" alt="img"> </p><p>创建文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/zookeeper/zkdatas/   </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps99.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg </span><br></pre></td></tr></table></figure><p>填充以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Zookeeper的数据存放目录</span><br><span class="line">dataDir = /export/data/zookeeper/zkdatas/</span><br><span class="line"># 保留多少个快照</span><br><span class="line">autopurge.snapRetainCount = 3</span><br><span class="line"># 日志多少小时清理一次</span><br><span class="line">autopurge.purgeInterval = 1</span><br><span class="line"># 集群中服务器地址</span><br><span class="line">server.1 = node1:2888:3888</span><br><span class="line">server.2 = node2:2888:3888</span><br><span class="line">server.3 = node3:2888:3888</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps100.jpg" alt="img"> </p><p>\3. 添加myid配置</p><p>在node1主机的&#x2F;export&#x2F;server&#x2F;zookeeper&#x2F;zkdatas&#x2F;这个路径下创建一个文件，文件名为myid ,文件内容为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /export/data/zookeeper/zkdatas/myid </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps101.jpg" alt="img"> </p><p>\4. 安装包分发并修改myid的值</p><p>在node1主机上，将安装包分发到其他机器</p><p>第一台机器上面执行以下两个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/</span><br><span class="line"></span><br><span class="line">scp -r /export/server/zookeeper-3.4.6/ root@node2:/export/server/</span><br><span class="line">scp -r /export/server/zookeeper-3.4.6/ root@node3:/export/server/  </span><br></pre></td></tr></table></figure><p>建立软连接（node2 node3）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s zookeeper-3.4.6/ zookeeper  </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps102.jpg" alt="img"> </p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps103.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 2 &gt; /export/data/zookeeper/zkdatas/myid  </span><br></pre></td></tr></table></figure><p>（node2上执行）</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps104.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /export/data/zookeeper/zkdatas/myid </span><br></pre></td></tr></table></figure><p> （node3上执行）</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps105.jpg" alt="img"> </p><p>\5. 三台机器启动zookeeper服务</p><p>（1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps106.jpg" alt="img"> </p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps107.jpg" alt="img"> </p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps108.jpg" alt="img"> </p><p>（2）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p> 三台主机分别查看启动状态</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps109.jpg" alt="img"><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps110.jpg" alt="img"> </p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps111.jpg" alt="img"> </p><p>\6. 编写一个脚本批量启动node1，2，3的zookeeper</p><p>（1）创建shell目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/shell</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps112.jpg" alt="img"> </p><p>（2）再此目录下建立一个zkall.sh文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim zkall.sh</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">for i in node1 node2 node3</span><br><span class="line">do</span><br><span class="line">echo ---------- zookeeper $i 启动 ------------</span><br><span class="line">ssh $i &quot;/export/server/zookeeper/bin/zkServer.sh start&quot;</span><br><span class="line">done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">for i in node1 node2 node3</span><br><span class="line">do</span><br><span class="line">echo ---------- zookeeper $i 停止 ------------ </span><br><span class="line">ssh $i &quot;/export/server/zookeeper/bin/zkServer.sh stop&quot;</span><br><span class="line">done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;status&quot;)&#123;</span><br><span class="line">for i in node1 node2 node3</span><br><span class="line">do</span><br><span class="line">echo ---------- zookeeper $i 状态 ------------ </span><br><span class="line">ssh $i &quot;/export/server/zookeeper/bin/zkServer.sh status&quot;</span><br><span class="line">done</span><br><span class="line">&#125;;;</span><br><span class="line">Esac</span><br><span class="line">（3）配置zk脚本环境变量、zookeeper的环境变量</span><br><span class="line">vi /etc/profile</span><br><span class="line">#ZOOKEEPER_SHELL_HOME</span><br><span class="line">export ZKS_HOME=/export/shell/</span><br><span class="line">export PATH=$PATH:$ZKS_HOME</span><br><span class="line">export ZK_HOME=/export/server/zookeeper</span><br><span class="line">export PATH=$&#123;ZK_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps113.jpg" alt="img"> </p><p>让环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>（4）vim .bashrc 设置环境路径</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps114.jpg" alt="img"> </p><p>（5）chmod +x zkall.sh 增加可执行权限</p><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps115.jpg" alt="img"> </p><p>（6）启动测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkall.sh start</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps116.jpg" alt="img"> </p><p>查看状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkall.sh status</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps117.jpg" alt="img"> </p><p>（7）zookeeper服务器常用命令</p><p>启动 ZooKeeper 服务: .&#x2F;zkServer.sh start</p><p>查看 ZooKeeper 服务状态: .&#x2F;zkServer.sh status</p><p>停止 ZooKeeper 服务: .&#x2F;zkServer.sh stop </p><p>重启 ZooKeeper 服务: .&#x2F;zkServer.sh restart </p><p>\7. Zookeerper命令操作</p><p>（1）连接ZooKeeper服务端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server node1:2181</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps118.jpg" alt="img"> </p><p>\8. ZooKeeper JavaAPI 操作</p><p>（1）建立连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">client = CuratorFrameworkFactory.builder()</span><br><span class="line">.connectString(&quot;192.168.88.161:2181&quot;)</span><br><span class="line">.sessionTimeoutMs(60 * 1000)</span><br><span class="line">.connectionTimeoutMs(15 * 1000)</span><br><span class="line">.retryPolicy(retryPolicy)</span><br><span class="line">.namespace(&quot;bigdata&quot;)</span><br><span class="line">.build();</span><br><span class="line">client.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps119.jpg" alt="img"> </p><p>（2）创建节点（带有数据）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String path = client.create().forPath(&quot;/app2&quot;, &quot;hehe&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">System.out.println(path);</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps120.jpg" alt="img"> </p><p>（3）查询结点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte[] data = client.getData().forPath(&quot;/app2&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(new String(data));</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps121.jpg" alt="img"> </p><p>（4）修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.setData().forPath(&quot;/app2&quot;, &quot;bigdata&quot;.getBytes());</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps122.jpg" alt="img"> </p><p>（5）删除节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().forPath(&quot;/app1&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps123.jpg" alt="img"> </p><p>（6）Watch事件监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TreeCache treeCache = new TreeCache(client,&quot;/app2&quot;);</span><br><span class="line">treeCache.getListenable().addListener(new TreeCacheListener() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception &#123;</span><br><span class="line">System.out.println(&quot;节点变化了&quot;);</span><br><span class="line">System.out.println(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">treeCache.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps124.jpg" alt="img"> </p><p>（7）分布式锁实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Ticket12306_old ticket12306_old = new Ticket12306_old();</span><br><span class="line">Thread t1 = new Thread(ticket12306_old,&quot;携程&quot;);</span><br><span class="line">Thread t2 = new Thread(ticket12306_old,&quot;飞猪&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Zookeeper%E9%85%8D%E7%BD%AE/wps125.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;zookeeper安装&quot;&gt;&lt;a href=&quot;#zookeeper安装&quot; class=&quot;headerlink&quot; title=&quot;zookeeper安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;zookeeper安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;安装前需要安装好jdk，检测集群时</summary>
      
    
    
    
    <category term="工具2" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B72/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Zookeeper" scheme="http://ssyyxx123.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Sqoop配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-14T05:20:19.000Z</published>
    <updated>2023-06-16T09:49:37.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、sqoop安装"><a href="#一、sqoop安装" class="headerlink" title="一、sqoop安装"></a>一、<strong>sqoop安装</strong></h2><p>（1）首先需要有java、mysql、hadoop和hive环境</p><p>（2）将以下下载到CentOS系统中，对其解压</p><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps74.jpg" alt="img"> </p><p>（3）解压在&#x2F;export&#x2F;server&#x2F; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzf apache-flume-1.9.0-bin.tar.gz -C /export/server/</span><br></pre></td></tr></table></figure><p>（4）添加软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s apache-flume-1.9.0-bin flume</span><br></pre></td></tr></table></figure><p>（5）配置文件修改： vim &#x2F;etc&#x2F;profile</p><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps75.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi sqoop-env.sh</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps76.jpg" alt="img"> </p><p>（6）加入mysql的jdbc驱动包 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /export/server/hive/lib/mysql-connector-java-5.1.32.jar $SQOOP_HOME/lib/</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps77.jpg" alt="img"> </p><p>（7）验证启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop list-databases --connect jdbc:mysql://node1:3306/ --username root --password hadoop </span><br></pre></td></tr></table></figure><p>本命令会列出所有mysql的数据库。 </p><p>到这里，整个Sqoop安装工作完成。</p><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps78.jpg" alt="img"> </p><h2 id="二、sqoop导入"><a href="#二、sqoop导入" class="headerlink" title="二、sqoop导入"></a><strong>二、</strong>sqoop导入</h2><p>（1）Sqoop测试表数据 在mysql中创建数据库userdb ，然后执行并参考资料中的sql脚本。</p><p>创建三张表: emp 雇员表、 emp_add 雇员地址表、 emp_conn 雇员联系表。</p><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps79.jpg" alt="img"> </p><p>（2）全量导入mysql表数据到HDFS</p><p>下面的命令用于从MySQL数据库服务器中的emp表导入HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\#example1-mysql-hdfs-start bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--delete-target-dir \ </span><br><span class="line">--target-dir /sqoop/sqoopresult \ </span><br><span class="line">--table emp --m 1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps80.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#example2-mysql-hdfs-terminated </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--target-dir /sqoop/sqoopresult2 \ </span><br><span class="line">--fields-terminated-by &#x27;\t&#x27; \ </span><br><span class="line">--table emp --m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps81.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#example3-mysql-hdfs-split</span><br><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \</span><br><span class="line">--username root \</span><br><span class="line">--password hadoop \</span><br><span class="line">--target-dir /sqoop/sqoopresult3 \</span><br><span class="line">--fields-terminated-by &#x27;\t&#x27; \</span><br><span class="line">--split-by id \</span><br><span class="line">--table emp --m 2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps82.jpg" alt="img"> </p><p>（3）全量导入mysql表数据到HIVE</p><p>先复制表结构到hive中再导入数据，在hive中新建数据库sqoop_test用于测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists sqoop_test comment &quot;this is sqoop db&quot; with dbproperties(&#x27;createdBy&#x27;=&#x27;yzl&#x27;); </span><br><span class="line"></span><br><span class="line">use sqoop_test; </span><br><span class="line"></span><br><span class="line">show tables; </span><br><span class="line"></span><br><span class="line">desc formatted emp_add_sp;</span><br></pre></td></tr></table></figure><p>将关系型数据的表结构复制到hive中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\#example4-1-mysql-hive-structure </span><br><span class="line">bin/sqoop create-hive-table \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--table emp_add \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--hive-table sqoop_test.emp_add_sp</span><br></pre></td></tr></table></figure><p>从关系数据库导入文件到hive中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#example4-2-mysql-hive-data </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--table emp_add \ </span><br><span class="line">--hive-table sqoop_test.emp_add_sp \ </span><br><span class="line">--hive-import \ </span><br><span class="line">--m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps83.jpg" alt="img"> </p><p>（4）导入表数据子集(where过滤)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#example6-mysql-hdfs-where </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--where &quot;city =&#x27;sec-bad&#x27;&quot; \ </span><br><span class="line">--target-dir /sqoop/wherequery \ </span><br><span class="line">--table emp_add --m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps84.jpg" alt="img"> </p><p>（5）导入表数据子集(query查询)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#example7-mysql-hdfs-query </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ --password hadoop \ </span><br><span class="line">--target-dir /sqoop/wherequery2 \ </span><br><span class="line">--query &#x27;select id,name,deg from emp WHERE id&gt;1203 and $CONDITIONS&#x27; \ </span><br><span class="line">--split-by id \ </span><br><span class="line">--fields-terminated-by &#x27;\001&#x27; \ </span><br><span class="line">--m 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps85.jpg" alt="img"> </p><p>（6）增量导入</p><p>Append模式增量导入，执行以下指令先将我们之前的数据导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#example8-1-mysql-hdfs-append </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--target-dir /sqoop/appendresult \ </span><br><span class="line">--table emp --m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用hdfs dfs -cat查看生成的数据文件，发现数据已经导入到hdfs中 然后在mysql的emp表中插入2条数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into `userdb`.`emp` (`id`, `name`, `deg`, `salary`, `dept`) values (&#x27;1206&#x27;, &#x27;allen&#x27;, &#x27;admin&#x27;, &#x27;30000&#x27;, &#x27;tp&#x27;); </span><br><span class="line"></span><br><span class="line">insert into `userdb`.`emp` (`id`, `name`, `deg`, `salary`, `dept`) values (&#x27;1207&#x27;, &#x27;woon&#x27;, &#x27;admin&#x27;, &#x27;40000&#x27;, &#x27;tp&#x27;);</span><br></pre></td></tr></table></figure><p>执行如下的指令，实现增量的导入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#example8-2-mysql-hdfs-append </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--table emp --m 1 \ </span><br><span class="line">--target-dir /sqoop/appendresult \ </span><br><span class="line">--incremental append \ </span><br><span class="line">--check-column id \ </span><br><span class="line">--last-value 1205</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps86.jpg" alt="img"> </p><p><em><strong>*Lastmodified模式增量导入*</strong></em></p><p>（1）首先创建一个customer表，指定一个时间戳字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table customertest(id int,name varchar(20),last_mod timestamp default current_timestamp on update current_timestamp);</span><br></pre></td></tr></table></figure><p>此处的时间戳设置为在数据的产生和更新时都会发生改变.</p><p>（2）插入如下记录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into customertest(id,name) values(1,&#x27;neil&#x27;); </span><br><span class="line"></span><br><span class="line">insert into customertest(id,name) values(2,&#x27;jack&#x27;); </span><br><span class="line"></span><br><span class="line">insert into customertest(id,name) values(3,&#x27;martin&#x27;); </span><br><span class="line"></span><br><span class="line">insert into customertest(id,name) values(4,&#x27;tony&#x27;); </span><br><span class="line"></span><br><span class="line">insert into customertest(id,name) values(5,&#x27;eric&#x27;);</span><br></pre></td></tr></table></figure><p>（3）此时执行sqoop指令将数据导入hdfs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#example9-1-mysql-hdfs-Lastmodified </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--target-dir /sqoop/lastmodifiedresult \ </span><br><span class="line">--table customertest --m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（4）再次插入一条数据进入customertest表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into customertest(id,name) values(6,&#x27;james&#x27;)</span><br></pre></td></tr></table></figure><p>（5）使用incremental的方式进行增量的导入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#example9-2-mysql-hdfs-Lastmodified </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--table customertest \ </span><br><span class="line">--target-dir /sqoop/lastmodifiedresult \ </span><br><span class="line">--check-column last_mod \ </span><br><span class="line">--incremental lastmodified \ </span><br><span class="line">--last-value &quot;2019-05-28 18:42:06&quot; \ </span><br><span class="line">--m 1 \ --append</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps87.jpg" alt="img"> </p><p><em><strong>*Lastmodified模式:append、merge-key*</strong></em></p><p>使用lastmodified模式进行增量处理要指定增量数据是以append模式(附加) 和merge-key(合并)模式添加 。</p><p>下面演示使用merge-by的模式进行增量更新 ：</p><p>（1）我们去更新 id为1的name字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update customertest set name = &#x27;Neil&#x27; where id = 1;</span><br></pre></td></tr></table></figure><p>更新之后，这条数据的时间戳会更新为更新数据时的系统时间.</p><p>（2）执行如下指令，把id字段作为merge-key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\#example10-mysql-hdfs-merge-key </span><br><span class="line">bin/sqoop import \ </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \ </span><br><span class="line">--username root \ </span><br><span class="line">--password hadoop \ </span><br><span class="line">--table customertest \ </span><br><span class="line">--target-dir /sqoop/lastmodifiedresult \ </span><br><span class="line">--check-column last_mod \ </span><br><span class="line">--incremental lastmodified \ </span><br><span class="line">--last-value &quot;2019-05-28 18:42:06&quot; \ </span><br><span class="line">--m 1 \ </span><br><span class="line">--merge-key id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps88.jpg" alt="img"> </p><h2 id="二、sqoop导出"><a href="#二、sqoop导出" class="headerlink" title="二、sqoop导出"></a><strong>二、sqoop导出</strong></h2><p>（1）准备HDFS数据</p><p>在HDFS文件系统中“&#x2F;emp&#x2F;”目录的下创建一个文件emp_data.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/sqoop-data/emp/</span><br></pre></td></tr></table></figure><p>vim emp_data.txt 添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1201,gopal,manager,50000,TP</span><br><span class="line"></span><br><span class="line">1202,manisha,preader,50000,TP</span><br><span class="line"></span><br><span class="line">1203,kalil,php dev,30000,AC</span><br><span class="line"></span><br><span class="line">1204,prasanth,php dev,30000,AC</span><br><span class="line"></span><br><span class="line">1205,kranthi,admin,20000,TP</span><br><span class="line"></span><br><span class="line">1206,satishp,grpdes,20000,GR</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps89.jpg" alt="img"> </p><p>上传至hdfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /sqoop/emp_data</span><br><span class="line">hadoop fs -put emp_data.txt /sqoop/emp_data</span><br></pre></td></tr></table></figure><p>（2）手动创建mysql中的目标表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use userdb;</span><br><span class="line">mysql&gt; create table employee ( id int not null primary key, name varchar(20), deg varchar(20),salary int,dept varchar(10));</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps90.jpg" alt="img"> </p><p>（3）执行导出命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop export --connect jdbc:mysql://node1:3306/userdb --username root --password hadoop --table employee1 --columns id,name,deg,salary,dept --export-dir /sqoop/emp_data/</span><br></pre></td></tr></table></figure><p><em><strong>*更新导出（updateonly模式）*</strong></em></p><p>（1）准备HDFS数据</p><p>在HDFS文件系统中&#x2F;sqoop&#x2F;updateonly_1&#x2F;目录的下创建一个文件updateonly_1.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1201,gopal,manager,50000</span><br><span class="line"></span><br><span class="line">1202,manisha,preader,50000</span><br><span class="line"></span><br><span class="line">1203,kalil,php dev,30000</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps91.jpg" alt="img"></p><p>（2）手动创建mysql中的目标表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE userdb;</span><br><span class="line">mysql&gt; CREATE TABLE updateonly ( id INT NOT NULL PRIMARY KEY,  name VARCHAR(20), deg VARCHAR(20),salary INT);</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps92.jpg" alt="img"> </p><p>（3）先执行全部导出操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop export </span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb </span><br><span class="line">--username root </span><br><span class="line">--password hadoop </span><br><span class="line">--table allowinsert </span><br><span class="line">--export-dir /sqoop/allowinsert_1/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看此时的数据<img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps93.jpg" alt="img"></p><p>（4）新增文件</p><p>创建文件allowinsert_2.txt。修改前三条数据并且新增了一条记录。上传至 &#x2F;sqoop&#x2F;allowinsert_2&#x2F;目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1201,gopal,manager,1212</span><br><span class="line"></span><br><span class="line">1202,manisha,preader,1313</span><br><span class="line"></span><br><span class="line">1203,kalil,php dev,1414</span><br><span class="line"></span><br><span class="line">1204,allen,java,1515</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps94.jpg" alt="img"> </p><p>(5) 执行更新导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop export \</span><br><span class="line">--connect jdbc:mysql://node1:3306/userdb \</span><br><span class="line">--username root --password hadoop \</span><br><span class="line">--table allowinsert \</span><br><span class="line">--export-dir /sqoop/allowinsert_2/ \</span><br><span class="line">--update-key id \</span><br><span class="line">--update-mode allowinsert</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看最终结果</p><p><img src="/2023/06/14/Sqoop%E9%85%8D%E7%BD%AE/wps95.png" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、sqoop安装&quot;&gt;&lt;a href=&quot;#一、sqoop安装&quot; class=&quot;headerlink&quot; title=&quot;一、sqoop安装&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;sqoop安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）首先需要有java、mysql、hadoop</summary>
      
    
    
    
    <category term="工具2" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B72/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Sqoop" scheme="http://ssyyxx123.github.io/tags/Sqoop/"/>
    
  </entry>
  
  <entry>
    <title>Flume配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/14/Flume%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/14/Flume%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-14T05:20:10.000Z</published>
    <updated>2023-06-16T09:40:52.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Flume安装"><a href="#一、Flume安装" class="headerlink" title="一、Flume安装"></a>一、<strong>Flume</strong>安装</h2><p>1、Flume安装</p><p>（1）上传flume的压缩包到&#x2F;export&#x2F;software下。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps1.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps2.jpg" alt="img"> </p><p>（2）解压到&#x2F;export&#x2F;server目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-flume-1.9.0-bin.tar.gz -C /export/server/</span><br></pre></td></tr></table></figure><p>同时设置软链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/apache-flume-1.9.0-bin/ flume</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps3.jpg" alt="img"> </p><p>（3）编辑&#x2F;etc&#x2F;profile，配置FLUME_HOME指向正确的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">#FLUME_HOME</span><br><span class="line">export FLUME_HOME=/export/server/flume</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps4.jpg" alt="img"> </p><p>（4）通过scp命令发送给其余机器，并设置软链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/apache-flume-1.9.0-bin root@node1:/export/server/</span><br><span class="line">scp -r /export/server/apache-flume-1.9.0-bin root@node3:/export/server/</span><br><span class="line"></span><br><span class="line">ln -s /export/server/apache-flume-1.9.0-bin /export/server/flume</span><br></pre></td></tr></table></figure><p>（5）添加配置文件</p><p>在flume&#x2F;myconf目录下添加配置文件netcat-logger.conf，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># example1-netcat-logger.conf: 单节点Flume配置</span><br><span class="line"># 定义agent名称为a1</span><br><span class="line"># 设置3个组件的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># 配置source类型为NetCat,监听地址为本机，端口为44444</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line">#source和channel关联</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"></span><br><span class="line"># 配置channel类型为内存，内存队列最大容量为1000，一个事务中从source接收的Events数量或者发送给sink的Events数量最大为100</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># 配置sink类型为Logger</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># 将sink绑定到channel上</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>（6）启动flume，在&#x2F;export&#x2F;server&#x2F;flume目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example1-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps5.jpg" alt="img"> </p><p>使用Netcat测试，复制node1标签，启动netcat连接到44444端口</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps6.jpg" alt="img"> </p><p>可以看到agent控制台接收到信息。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps7.jpg" alt="img"> </p><h2 id="二、Flume测试"><a href="#二、Flume测试" class="headerlink" title="二、Flume测试"></a><strong>二、Flume测试</strong></h2><p>（1）exec_source测试:</p><p>使用Flume从日志文件中将日志收集到日志中间，以便于查找和分析。启动测试流程为：</p><p>1）准备日志文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/flume-example-data</span><br></pre></td></tr></table></figure><p>2）写一个脚本模拟向日志文件中持续写入数据，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/flume-example-data/shell</span><br><span class="line">vim access_data.sh</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps8.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..10000&#125;；</span><br><span class="line">do echo $&#123;i&#125; “bigdata log 5/11” &gt;&gt; access.log;</span><br><span class="line">sleep 0.5;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>3）创建flume自定义配置文件，放到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf目录下。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps9.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># example2-exec-source-logger.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = exe</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.command = tail -F /export/data/flume-example-data/shell/access.log </span><br><span class="line">a1.sources.r1.batchSize = 100</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>4）启动flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example2-exec-source-logg</span><br><span class="line">er.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps10.jpg" alt="img"> </p><p>（2）spooldir_source测试:</p><p>监听一个指定的文件夹，如果文件夹下有没有采集过的新文件，则会采集新文件中的数据。监听测试流程为：</p><p>1）创建spooldir监听目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/flume-example-data/spooldir</span><br></pre></td></tr></table></figure><p>2）在spooldir下新建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir flume511.txt</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps11.jpg" alt="img"> </p><p>3）创建flume自定义配置文件，放到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf目录下。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps12.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\#example3-spooldir-source.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /export/data/flume-example-data/spooldir</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>4）启动flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example3-spooldir-source</span><br><span class="line">.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps13.jpg" alt="img"> </p><p>（3）taildir_source测试:</p><p>监听指定目录下的文件，只要文件中有新写入的行，就会被tail到，它会记录每一个文件所tail到的位置，记录到一个指定的positionfile保存目录中，格式为json。保证数据不会漏采（丢失）。 测试流程如下：</p><p>1）新建监听目录  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/flume-example-data/weblog/web-access.log</span><br><span class="line"></span><br><span class="line">mkdir -p /export/data/flume-example-data/weblog/web-access.log.1</span><br><span class="line"></span><br><span class="line">mkdir -p /export/data/flume-example-data/wxlog/wx-access.log</span><br></pre></td></tr></table></figure><p>2）生成测试数据</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps14.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..1000&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;webweb111 $RANDOM&quot; &gt;&gt; /export/data/flume-example-data//web-access.log</span><br><span class="line">echo &quot;webweb222 $RANDOM&quot; &gt;&gt; /export/data/flume-example-data/log/web-access.log.1</span><br><span class="line">echo &quot;wxwxwx333 $RANDOM&quot; &gt;&gt; /export/data/flume-example-data/wxlog/wx-access.log</span><br><span class="line">sleep 0.1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>3）创建flume自定义配置文件，放到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf目录下。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps15.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">\#example4-taildir-source.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.positionFile = /export/data/flume-example-data/flumedata/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = g1 g2</span><br><span class="line">a1.sources.r1.filegroups.g1 = /export/data/flume-example-data/weblog/web.*</span><br><span class="line">a1.sources.r1.filegroups.g2 = /export/data/flume-example-data/wxlog/wx.*</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line">\#动态的header-keys eg：filepath=/../../../</span><br><span class="line">a1.sources.r1.fileHeaderKey = filepath</span><br><span class="line"></span><br><span class="line">\#写死的header-keys（静态的） eg:a1 = aa1</span><br><span class="line">a1.sources.r1.headers.g1.a1 = aa1</span><br><span class="line">a1.sources.r1.headers.g1.b1 = bb1</span><br><span class="line">a1.sources.r1.headers.g2.a2 = aa2</span><br><span class="line">a1.sources.r1.headers.g2.b2 = bb2</span><br><span class="line">a1.sources.r1.maxBatchCount = 1000</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>4）启动flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f  myconf/example4-taildir-source.c</span><br><span class="line">onf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps16.jpg" alt="img"> </p><p>（4）avro source测试</p><p>avro source 是通过监听一个网络端口来接收数据，被接收数据必须是使用avro序列化框架序列化后的数据。工作机制：启动一个网络服务，监听一个端口，收集端口上收到的avro序列化数据流。</p><p>1）自定义创建flume自定义配置文件，放到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf目录下。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps17.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\#example5-avro-source.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 4141</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 200</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）启动agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f  myconf/example5-avro-source.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>  注意：在node1的&#x2F;export&#x2F;server&#x2F;flume目录下执行。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps18.jpg" alt="img"> </p><p>3）新建avro-log.txt，用一个客户端去给启动好的source发送avro序列化数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/flume-example-data/avro-log.txt  </span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps19.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng avro-client --host node1  --port 4141  -f /export/data/flu</span><br><span class="line">me-example-data/avro-log.txt  </span><br></pre></td></tr></table></figure><p>注意：复制标签在新窗口执行！！！</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps20.jpg" alt="img"> </p><p>最后在agent控制台可以看到avro-log.txt内的内容。</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps21.jpg" alt="img"> </p><p>（5）、使用File Channel实现数据持久化</p><p>测试流程如下：</p><p>1）自定义flume配置文件，并放到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf中</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps22.jpg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#example6-file-channel.conf</span><br><span class="line"># 定义agent名称为a1</span><br><span class="line"># 设置3个组件的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"># 多个channel使用空格分隔</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"></span><br><span class="line"># 配置source类型为NetCat,监听地址为本机，端口为44444</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># 配置sink类型为Logger</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># 配置channel类型为内存，内存队列最大容量为1000，一个事务中从source接收的Events数量或者发送给sink的Events数量最大为100</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># 配置FileChannel,checkpointDir为检查点文件存储目录，dataDirs为日志数据存储目录，</span><br><span class="line">a1.channels.c2.type = file</span><br><span class="line">a1.channels.c2.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint_filechannel</span><br><span class="line">a1.channels.c2.dataDirs = /export/data/flume-example-data/flumedata/data_filechannel</span><br><span class="line"></span><br><span class="line"># 将source和sink绑定到channel上</span><br><span class="line"># source同时绑定到c1和c2上</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1 | c2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）为了方便日志打印，可以将-Dflume.root.logger&#x3D;INFO,console添加在conf的环境配置中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp flume-env.sh.template flume-env.sh</span><br><span class="line">vi flume-env.sh</span><br></pre></td></tr></table></figure><p># 添加JAVA_OPTS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_OPTS=&quot;-Dflume.root.logger=INFO,console&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps23.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps24.jpg" alt="img"> </p><p>3）启动flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example6-file-channel.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>4）通过Netcat发送数据，发送到c2的数据被消费</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps25.jpg" alt="img"> </p><p>agent控制台接收数据成功</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps26.jpg" alt="img"> </p><p>（6）、利用avro source和avro sink实现agent级联</p><p>1）基本介绍：可以将多个Flume agent 程序连接在一起，其中一个agent的sink将数据发送到另一个agent的source。从多个Web服务器收集日志，发送到一个或多个集中处理的agent，之后再发往日志存储中心。</p><p>2）测试流程如下：</p><p>\1) 启动hdfs，并检查工作状态。node1上有DataNode,NodeManager</p><p>,Namenode,ResourceManager。</p><p>node2上有NodeManager,SecondaryNameNode,DataNode。node3上有NodeManager,DataNode。</p><p>\2) 配置上游配置文件，保存到node1,node2上。</p><p>\3) 配置下游配置文件，保存到node3上。</p><p>\4) 启动下游node3上的flume agent。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example7-2-avro-f-hdfs.conf -Dflume.root.logger=DEBUG，console</span><br></pre></td></tr></table></figure><p>\5) 在node1和node2上准备两个日志目录来生成模拟日志数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/flume-example-data/weblog/</span><br><span class="line"></span><br><span class="line">mkdir /export/data/flume-example-data/wxlog/</span><br></pre></td></tr></table></figure><p>\6) 在node1和node2上利用shell脚本生成日志数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim avro-hdfs.sh</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">echo webwebwebwebweb &gt;&gt; /export/data/flume-example-data/weblog/web-access.log</span><br><span class="line">echo wxwxwxwxwxwxwx &gt;&gt; /export/data/flume-example-data/wxlog/</span><br><span class="line">wx-access.log</span><br><span class="line">sleep 0.01</span><br><span class="line">Done</span><br></pre></td></tr></table></figure><p>7）启动node1和node2上的flume agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup bin/flume-ng agent -n a1 -c conf/ -f myconf/example7-1-taildir-f</span><br><span class="line">-avro.conf -Dflume.root.logger=INFO,console 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>8）上游配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#上游服务器配置 example7-1-taildir-f-avro.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.positionFile = /export/data/flume-example-data/flumedata/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = g1 g2</span><br><span class="line">a1.sources.r1.filegroups.g1 = /export/data/flume-example-data/weblog/web.*</span><br><span class="line">a1.sources.r1.filegroups.g2 = /export/data/flume-example-data/wxlog/wx.*</span><br><span class="line">#提高吞吐量</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">#动态的header-keys eg：filepath=/../../../</span><br><span class="line">a1.sources.r1.fileHeaderKey = filepath</span><br><span class="line">#拦截器配置，添加header=timestamp</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class="line">a1.sources.r1.interceptors.i1.headerName = timestamp</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">#本机数据汇集检查点、event存储目录</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.batch-size = 1000</span><br><span class="line">#下游目标主机、端口</span><br><span class="line">a1.sinks.k1.hostname = node3</span><br><span class="line">a1.sinks.k1.port = 44444</span><br></pre></td></tr></table></figure><p>9）下游配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#下游服务器配置 example7-2-avro-f-hdfs.conf</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">#下游数据汇集avro source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.threads = 10</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">#hdfs sink</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://node1:8020/logdata/%Y-%m-%d/%H/</span><br><span class="line">#eg：文件名 logdata_34438hxfd.log，在滚动时，logdata_34438hxfd.log.tmp</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .log</span><br><span class="line">#三个条件没有优先级，谁先达到就进行滚动</span><br><span class="line">#按时间间隔滚动</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">#按文件大小滚动 256MB</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 268435456</span><br><span class="line">#按event条数滚动</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 100000</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k1.hdfs.codeC = gzip</span><br><span class="line">a1.sinks.k1.hdfs.fileType = CompressedStream</span><br></pre></td></tr></table></figure><p>先在下游启动flume agent 。下游的agent的sink将数据发送到上游agent的source。</p><p>启动下游的flume agent</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps27.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps28.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps29.jpg" alt="img"> </p><p>到hdfs上查看结果</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps30.jpg" alt="img"> </p><h2 id="三、flume测试以及综合案例"><a href="#三、flume测试以及综合案例" class="headerlink" title="三、flume测试以及综合案例"></a><strong>三、flume测试以及综合案例</strong></h2><p>（1）拦截器</p><p>Host Interceptor拦截器将运行agent的hostname 或者 IP地址写入到事件的headers中。</p><p>1）在 &#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf 中添加example8-interceptor.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 定义agent名称为a1</span><br><span class="line"># 设置3个组件的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"># 配置source类型为NetCat,监听地址为本机，端口为44444</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"># 配置拦截器为host</span><br><span class="line">a1.sources.r1.interceptors = i1 </span><br><span class="line">a1.sources.r1.interceptors.i1.type = host</span><br><span class="line"># 配置sink类型为Logger</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"># 配置channel类型为内存，内存队列最大容量为1000，一个事务中从source接收的Events数量或者发送给sink的Events数量最大为100</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"># 将source和sink绑定到channel上</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps31.jpg" alt="img"> </p><p>2）、在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume</p><p>（复制链接进入相同路径下，输入nc node1 44444输入内容进行测试，结果显示IP地址，测试成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example8-interceptor.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps32.jpg" alt="img"> </p><p>（2）Timestamp Interceptor拦截器</p><p>将当前时间写入到事件的headers中。</p><p>1）将以下内容添加到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf的example8-inteptor.conf中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.interceptors = i1 i2</span><br><span class="line">a1.sources.r1.interceptors.i1.type = host</span><br><span class="line">a1.sources.r1.interceptors.i2.type = timestamp</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps33.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume</p><p>（与上一测试使用相同方法进行测试，结果显示timestanp，测试成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example8-interceptor.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps34.jpg" alt="img"> </p><p>（3）Static Interceptor</p><p>运行用户对所有的事件添加固定的header</p><p>1）将以下内容添加到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf的example8-interceptor.conf中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.interceptors = i1 i2 i3</span><br><span class="line">a1.sources.r1.interceptors.i1.type = host</span><br><span class="line">a1.sources.r1.interceptors.i2.type = timestamp</span><br><span class="line">a1.sources.r1.interceptors.i3.type = static</span><br><span class="line">a1.sources.r1.interceptors.i3.key = datacenter</span><br><span class="line">a1.sources.r1.interceptors.i3.value = NEW_YORK</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps35.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><p>（结果显示datacenter，则测试成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example8-interceptor.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps36.jpg" alt="img"> </p><p>（4）UUID Interceptor</p><p>用于每个events header中生成一个UUID字符串，可以在sink中读取并使用</p><p>1）将以下内容添加到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf的example8-interceptor.conf中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.interceptors = i1 i2 i3 i4</span><br><span class="line">a1.sources.r1.interceptors.i1.type = host</span><br><span class="line">a1.sources.r1.interceptors.i2.type = timestamp</span><br><span class="line">a1.sources.r1.interceptors.i3.type = static</span><br><span class="line">a1.sources.r1.interceptors.i3.key = datacenter</span><br><span class="line">a1.sources.r1.interceptors.i3.value = NEW_YORK</span><br><span class="line">a1.sources.r1.interceptors.i4.type = org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps37.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><p>（显示字符串，则测试成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example8-interceptor.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps38.jpg" alt="img"> </p><p>（5）Search and Replace Interceptor</p><p>用于将events中的正则匹配到的内容做相应的替换。</p><p>1）将以下内容添加到&#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf的example8-interceptor.conf中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.interceptors = i1 i2 i3 i4 i5</span><br><span class="line">a1.sources.r1.interceptors.i1.type = host</span><br><span class="line">a1.sources.r1.interceptors.i2.type = timestamp</span><br><span class="line">a1.sources.r1.interceptors.i3.type = static</span><br><span class="line">a1.sources.r1.interceptors.i3.key = datacenter</span><br><span class="line">a1.sources.r1.interceptors.i3.value = NEW_YORK</span><br><span class="line">a1.sources.r1.interceptors.i4.type = org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder</span><br><span class="line">a1.sources.r1.interceptors.i5.type = search_replace</span><br><span class="line">a1.sources.r1.interceptors.i5.searchPattern = \\d&#123;6&#125;</span><br><span class="line">a1.sources.r1.interceptors.i5.replaceString = ******1234</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps39.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example8-interceptor.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps40.jpg" alt="img"> </p><p>3）复制node1链接，进入&#x2F;export&#x2F;server&#x2F;flume路径下，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc node1 44444</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps41.jpg" alt="img"> </p><p>（6）定义拦截器</p><p>1）在ldea中添加自定义拦截器</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps42.jpg" alt="img"> </p><p>2）将项目打包复制到node1的&#x2F;export&#x2F;server&#x2F;flume&#x2F;lib路径下</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps43.jpg" alt="img"> </p><p>3）在node1、node2中添加上游服务器设置example9-1-taildir-f-avro-interceptor.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.positionFile = /export/data/flume-example-data/flumedata/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = g1</span><br><span class="line">a1.sources.r1.filegroups.g1 = /export/data/flume-example-data/app/event.*</span><br><span class="line">#提高吞吐量</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">#动态的header-keys eg：filepath=/../../../</span><br><span class="line">a1.sources.r1.fileHeaderKey = filepath</span><br><span class="line">#拦截器配置,添加自定义拦截器</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = ccjz.rgzn.flume.EventTimestampInterceptor$EventTimestampInterceptorBuilder</span><br><span class="line">a1.sources.r1.interceptors.i1.tsFiledName = timeStamp</span><br><span class="line">a1.sources.r1.interceptors.i1.keyName = timestamp</span><br><span class="line">a1.sources.r1.interceptors.i1.toEncryFieldName = account</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">#本机数据汇集检查点、event存储目录</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.batch-size = 1000</span><br><span class="line">#下游目标主机、端口</span><br><span class="line">a1.sinks.k1.hostname = node3</span><br><span class="line">a1.sinks.k1.port = 44444</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps44.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps45.jpg" alt="img"> </p><p>4）在node3中添加下游服务器配置example9-2-avro-f-hdfs-interceptor.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">#下游数据汇集avro source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.threads = 10</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">#hdfs sink</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://node1:8020/logdata-interceptor/%Y-%m-%d/%H/</span><br><span class="line">#eg：文件名 logdata_34438hxfd.log，在滚动时，logdata_34438hxfd.log.tmp</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .log</span><br><span class="line">#三个条件没有优先级，谁先达到就进行滚动</span><br><span class="line">#按时间间隔滚动</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">#按文件大小滚动 256MB</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 268435456</span><br><span class="line">#按event条数滚动</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 100000</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k1.hdfs.codeC = gzip</span><br><span class="line">a1.sinks.k1.hdfs.fileType = CompressedStream</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps46.jpg" alt="img"> </p><p>5）在node1和node2中创建日志目录来生成模拟日志数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/flume-example-data/app/</span><br><span class="line"></span><br><span class="line">mkdir /export/data/flume-example-data/app/</span><br></pre></td></tr></table></figure><p>6）在node3中&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example9-2-avro-f-hdfs-int</span><br><span class="line">erceptor.conf -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps47.jpg" alt="img"> </p><p>7）启动node1和node2上的flume agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example9-1-taildir-f-avro-</span><br><span class="line">interceptor.conf</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps48.jpg" alt="img"> </p><p>8）在hdfs上查看是否采集到数据</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps49.jpg" alt="img"> </p><p>（7）Channel选择器</p><p>Replicating Channel Selector中c2是一个可选的channel，写入c2失败的话会被忽略，c1没有标记为可选，如果写入c1失败会导致事务的失败</p><p>1）在 &#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf 中添加example10-channel-replicating.conf：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sources.r1.command = tail -F /export/data/flume-example-data/logdata/access.log</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line">a1.sources.r1.selector.optional = c2</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://node1:8020/logdata_c1/%Y-%m-%d/%H/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .log</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 268435456</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.type = hdfs</span><br><span class="line">a1.sinks.k2.hdfs.path = hdfs://node1:8020/logdata_c2/%Y-%m-%d/%H/</span><br><span class="line">a1.sinks.k2.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k2.hdfs.fileSuffix = .log</span><br><span class="line">a1.sinks.k2.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k2.hdfs.rollSize = 268435456</span><br><span class="line">a1.sinks.k2.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k2.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps50.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example10-channel-replica</span><br><span class="line">ting.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps51.jpg" alt="img"> </p><p>（8）Multiplexing Channel Selector</p><p>可以根据event中的一个指定key的value来决定这条消息会写入哪个channel。</p><p>1）在 &#x2F;export&#x2F;server&#x2F;flume&#x2F;myconf 中添加example11-channel-Multiplexing.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sources.r1.positionFile = /export/data/flume-example-data/flumedata/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = g1 g2</span><br><span class="line">a1.sources.r1.filegroups.g1 = /export/data/flume-example-data/weblog/web.*</span><br><span class="line">a1.sources.r1.filegroups.g2 = /export/data/flume-example-data/wxlog/wx.*</span><br><span class="line">a1.sources.r1.headers.g1.logtype = web</span><br><span class="line">a1.sources.r1.headers.g2.logtype = wx</span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line">a1.sources.r1.selector.header = logtype</span><br><span class="line">a1.sources.r1.selector.mapping.web = c1</span><br><span class="line">a1.sources.r1.selector.mapping.wx = c2</span><br><span class="line">a1.sources.r1.selector.default = c2</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://node1:8020/%&#123;logtype&#125;/%Y-%m-%d/%H/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .log</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 268435456</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.type = hdfs</span><br><span class="line">a1.sinks.k2.hdfs.path = hdfs://node1:8020/%&#123;logtype&#125;/%Y-%m-%d/%H/</span><br><span class="line">a1.sinks.k2.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k2.hdfs.fileSuffix = .log</span><br><span class="line">a1.sinks.k2.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k2.hdfs.rollSize = 268435456</span><br><span class="line">a1.sinks.k2.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k2.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps52.jpg" alt="img"> </p><p>2）在&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf -f myconf/example11-channel</span><br><span class="line">-Multiplexing.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps53.jpg" alt="img"> </p><p>3）在hdfs上查看</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps54.jpg" alt="img"> </p><p>（9）Sink处理器实例</p><p>Failover Sink Processor是一组中只有优先级高的那个sink在工作，另一个是等待中，如果高优先级的sink发送数据失败，则专用低优先级的sink去工作，并且，在配置时间penalty之后，还会尝试用高优先级的去发送数据</p><p>1）在node1上配置上游服务器example12-1-sink-failover.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.command = tail -F /export/data/flume-example-data/logdata/access.log</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = node2</span><br><span class="line">a1.sinks.k1.port = 44444</span><br><span class="line">a1.sinks.k1.batch-size = 1000</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = node3</span><br><span class="line">a1.sinks.k2.port = 44444</span><br><span class="line">a1.sinks.k2.batch-size = 1000</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 200</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 100</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 5000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps55.jpg" alt="img"> </p><p>2）在node2、node3上配置下游服务器example12-2-sink-failover.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.threads = 10</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps56.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps57.jpg" alt="img"> </p><p>3）在node3中&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example12-2-sink-failover</span><br><span class="line">.conf -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps58.jpg" alt="img"> </p><p>4）启动node1和node2上的flume agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example12-1-sink-failover.Conf</span><br></pre></td></tr></table></figure><p>（10）Load balancing Sink Processor</p><p>允许channel中的数据在一组sink中的多个sink之间进行交替</p><p>1）在node1上配置上游服务器example13-1-sink-loadbalance.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.command = tail -F /export/data/flume-example-data/logdata/access.log</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = node2</span><br><span class="line">a1.sinks.k1.port = 44444</span><br><span class="line">a1.sinks.k1.batch-size = 1000</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = node3</span><br><span class="line">a1.sinks.k2.port = 44444</span><br><span class="line">a1.sinks.k2.batch-size = 1000</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.backoff = true </span><br><span class="line">a1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps59.jpg" alt="img"> </p><p>2）在node2、node3上配置下游服务器example13-2-sink-loadbalance.conf</p><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.threads = 10</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 1000</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps60.jpg" alt="img"> </p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps61.jpg" alt="img"> </p><p>3）在node3中&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example13-2-sink-loadbala</span><br><span class="line">nce.conf -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps62.jpg" alt="img"> </p><p>4）启动node1和node2上的flume agent：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example13-1-sink-loadbalance.conf</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps63.jpg" alt="img"> </p><p>（11）Flume综合实战案例</p><p>1）准备一个MySQL服务器，创建一个库：realtimedw，字符集选择utf8，防止中文乱码：</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps64.jpg" alt="img"> </p><p>2）将事先准备好的realtimedw.sql、t_md_areas.sql两个sql文件导入到realtimedw库中：</p><p>3）在node1中创建一个目录，用来存放配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/flume-example-data/loginit</span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps65.jpg" alt="img"> </p><p>4）修改log_gen_app.jar、log_gen_wx.jar的配置文件中的other.properties,</p><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#logger,kafka</span><br><span class="line">sink.type=logger</span><br><span class="line">#roll console dayroll</span><br><span class="line">logger.type=dayroll</span><br><span class="line">initdata.releasechannel=/export/data/flume-example-data/loginit/releasechannel.txt</span><br><span class="line">initdata.phoneinfo=/export/data/flume-example-data/loginit/phoneinfo.txt</span><br><span class="line">initdata.eventIds=/export/data/flume-example-data/loginit/eventIds.txt</span><br><span class="line">init.user.area=/export/data/flume-example-data/loginit/area.txt</span><br><span class="line">db.url=jdbc:mysql://127.0.0.1:3306/realtimedw?</span><br><span class="line">useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">db.user=root</span><br><span class="line">db.password=hadoop</span><br><span class="line"># max concurrent accessor amount</span><br><span class="line">online.max.num=1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5）log_gen_app.jar的配置文件log4j.properties，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,trace</span><br><span class="line">log4j.appender.trace=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.trace.Threshold=DEBUG</span><br><span class="line">log4j.appender.trace.ImmediateFlush=true</span><br><span class="line">log4j.appender.trace.Target=System.out</span><br><span class="line">log4j.appender.trace.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.trace.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n </span><br><span class="line">log4j.logger.console = INFO,console</span><br><span class="line">log4j.additivity.console=false</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.ImmediateFlush=true</span><br><span class="line">log4j.appender.console.Target=System.out</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=%m%n</span><br><span class="line"># log4j.logger.roll = INFO,rollingFile</span><br><span class="line"># log4j.additivity.roll=false</span><br><span class="line"># log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</span><br><span class="line"># log4j.appender.rollingFile.Threshold=DEBUG</span><br><span class="line"># log4j.appender.rollingFile.ImmediateFlush=true</span><br><span class="line"># log4j.appender.rollingFile.Append=true</span><br><span class="line"># log4j.appender.rollingFile.File=/loggen/logdata/wx/event.log</span><br><span class="line"># log4j.appender.rollingFile.MaxFileSize=120MB</span><br><span class="line"># log4j.appender.rollingFile.MaxBackupIndex=50</span><br><span class="line"># log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line"># log4j.appender.rollingFile.layout.ConversionPattern=%m%n</span><br><span class="line">log4j.logger.dayroll = INFO,DailyRolling</span><br><span class="line">log4j.additivity.dayroll=false</span><br><span class="line">log4j.appender.DailyRolling=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.DailyRolling.File=/export/data/flume-example-data/gen_logdata/event_log_app</span><br><span class="line">log4j.appender.DailyRolling.DatePattern=yyyy-MM-dd&#x27;.log&#x27;</span><br><span class="line">log4j.appender.DailyRolling.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.DailyRolling.layout.ConversionPattern=%m%n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps66.jpg" alt="img"> </p><p>6）修改log_gen_wx.jar的配置文件log4j.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,trace</span><br><span class="line">log4j.appender.trace=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.trace.Threshold=DEBUG</span><br><span class="line">log4j.appender.trace.ImmediateFlush=true</span><br><span class="line">log4j.appender.trace.Target=System.out</span><br><span class="line">log4j.appender.trace.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.trace.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line">log4j.logger.console = INFO,console</span><br><span class="line">log4j.additivity.console=false</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.ImmediateFlush=true</span><br><span class="line">log4j.appender.console.Target=System.out</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=%m%n</span><br><span class="line"># log4j.logger.roll = INFO,rollingFile</span><br><span class="line"># log4j.additivity.roll=false</span><br><span class="line"># log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</span><br><span class="line"># log4j.appender.rollingFile.Threshold=DEBUG</span><br><span class="line"># log4j.appender.rollingFile.ImmediateFlush=true</span><br><span class="line"># log4j.appender.rollingFile.Append=true</span><br><span class="line"># log4j.appender.rollingFile.File=/loggen/logdata/wx/event.log</span><br><span class="line"># log4j.appender.rollingFile.MaxFileSize=120MB</span><br><span class="line"># log4j.appender.rollingFile.MaxBackupIndex=50</span><br><span class="line"># log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line"># log4j.appender.rollingFile.layout.ConversionPattern=%m%n</span><br><span class="line">log4j.logger.dayroll = INFO,DailyRolling</span><br><span class="line">log4j.additivity.dayroll=false</span><br><span class="line">log4j.appender.DailyRolling=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.DailyRolling.File=/export/data/flume-example-data/gen_logdata/event_log_wx</span><br><span class="line">log4j.appender.DailyRolling.DatePattern=yyyy-MM-dd&#x27;.log&#x27;</span><br><span class="line">log4j.appender.DailyRolling.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.DailyRolling.layout.ConversionPattern=%m%n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7）将以下文件上传到&#x2F;export&#x2F;data&#x2F;flume-example-data&#x2F;loginit路径下：</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps67.jpg" alt="img"> </p><p>8）给shell文件授权，并启动日志生成器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod +x genapplog.sh</span><br><span class="line"></span><br><span class="line">chmod +x genwxlog.sh</span><br><span class="line"></span><br><span class="line">sh genapplog.sh</span><br><span class="line"></span><br><span class="line">sh genwxlog.sh</span><br></pre></td></tr></table></figure><p>9）查看jps</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps68.jpg" alt="img"> </p><p>10）进入&#x2F;export&#x2F;data&#x2F;flume-example&#x2F;gen_logdata下查看日志文件生成效果：</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps69.jpg" alt="img"> </p><p>11）在node1、node2中配置上游服务器example14-1-Comprehensive-practical.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.positionFile = /export/data/flume-example-data/flumedata/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = g1</span><br><span class="line">a1.sources.r1.filegroups.g1 = /export/data/flume-example-data/gen_logdata/event_.*</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.sources.r1.interceptors = i1 i2 i3</span><br><span class="line">a1.sources.r1.interceptors.i1.type = ccjz.rgzn.flume.EncryptSpecifiedFieldInterceptor$EncryptInterceptorBuilder</span><br><span class="line">a1.sources.r1.interceptors.i1.toEncryFieldName = account</span><br><span class="line">a1.sources.r1.interceptors.i2.type = ccjz.rgzn.flume.EventTimeStampExtractInterceptor$EventTimestampInterceptorBuilder</span><br><span class="line">a1.sources.r1.interceptors.i2.tsFiledName = timeStamp</span><br><span class="line">a1.sources.r1.interceptors.i2.keyName = timestamp</span><br><span class="line">#拥有openid的是wx小程序用户日志</span><br><span class="line">a1.sources.r1.interceptors.i3.type = ccjz.rgzn.flume.LogTypeInterceptor$LogTypeInterceptorBuilder</span><br><span class="line">a1.sources.r1.interceptors.i3.flag.fieldname = openid</span><br><span class="line">a1.sources.r1.interceptors.i3.headerKey = logtype</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-example-data/flumedata/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = node2</span><br><span class="line">a1.sinks.k1.port = 44444</span><br><span class="line">a1.sinks.k1.batch-size = 1000</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = node3</span><br><span class="line">a1.sinks.k2.port = 44444</span><br><span class="line">a1.sinks.k2.batch-size = 1000</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 200</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 100</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 5000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps70.jpg" alt="img"> </p><p>12）在node2、node3中配置下游服务器example14-2-Comprehensive-practical.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.threads = 10</span><br><span class="line">a1.sources.r1.batchSize = 1000</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /export/data/flume-exampledata/flumedata_2/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /export/data/flume-example-data/flumedata_2/data</span><br><span class="line">a1.channels.c1.transactionCapacity = 2000</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://node1:8020/gen_logdata/%&#123;logtype&#125;/%Y-%m-%d/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logdata_</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .log</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 300</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 268435456</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line">a1.sinks.k1.hdfs.codeC = gzip</span><br><span class="line">a1.sinks.k1.hdfs.fileType = CompressedStream</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps71.jpg" alt="img"> </p><p>13）将node1、node2、node3机器上之前的一些flumedata目录清除；</p><p>14）在node1、node2中创建日志数据目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /export/data/flume-example/weblog</span><br></pre></td></tr></table></figure><p>在此目录下创建log1、log2、log3文件夹。</p><p>15）在node2、node3中&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example14-2-Comprehens</span><br><span class="line">ive-practical.conf -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p>16）在&#x2F;export&#x2F;data&#x2F;flume-example&#x2F;weblog路径下，</p><p>输入for i in {i..10000}模拟往3类日志中写入日志：</p><p>&gt;do</p><p>&gt;echo ${i}-access,1389999,asdb,ccc,ddd,eee,fff &gt;&gt; log1&#x2F;access.log</p><p>&gt;echo ${i}-nginx,1389999,asdb,ccc,ddd,eee,fff &gt;&gt; log2&#x2F;nginx.log</p><p>&gt;echo ${i}-weblog,1389999,asdb,ccc,ddd,eee,fff &gt;&gt; log3&#x2F;weblog.log</p><p>&gt;sleep 0.2</p><p>&gt;done</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps72.jpg" alt="img"> </p><p>17）在node1中&#x2F;export&#x2F;server&#x2F;flume路径下启动flume：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -n a1 -c conf/ -f myconf/example14-1-Comprehensi</span><br><span class="line">ve-practical.conf -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p>18）在hdfs上查看结果，数据上传成功</p><p><img src="/2023/06/14/Flume%E9%85%8D%E7%BD%AE/wps73.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Flume安装&quot;&gt;&lt;a href=&quot;#一、Flume安装&quot; class=&quot;headerlink&quot; title=&quot;一、Flume安装&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;Flume&lt;/strong&gt;安装&lt;/h2&gt;&lt;p&gt;1、Flume安装&lt;/p&gt;
&lt;p&gt;（1）上传flu</summary>
      
    
    
    
    <category term="工具2" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B72/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Flume" scheme="http://ssyyxx123.github.io/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Spark（Pyspark基础环境编码配置）</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/</id>
    <published>2023-06-09T00:13:10.000Z</published>
    <updated>2023-06-09T01:12:54.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（pyspark基础编码环境）"><a href="#spark（pyspark基础编码环境）" class="headerlink" title="spark（pyspark基础编码环境）"></a><strong>spark（pyspark基础编码环境）</strong></h2><p>（一）、pyspark环境配置安装。</p><p>PySpark是Spark官方提供的一个Python类库，内置了Spark API，可以通过PySpark类库来编写Spark程序，并提交到Spark集群中运行。前情提示：</p><p>（1）将课程资料中提供的的hadoop-3.3.0文件，复制到某个盘符下（中文的且无空格的）。</p><p>（2）将文件夹内bin内的Hadoop.dll复制到C:\Windows\Systmctl32里面去。</p><p>（3）在系统环境变量中配置HADOOP_HOME，指向hadoop-3.3.0文件夹的路径.</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps154.jpg" alt="img"> </p><p>（二）本机PySpark环境配置</p><p>在前面部署Spark的时候，已经在Linux系统上部署了acaconda的Python环境，详见Spark的Stand Alone模式部署章节。故本次在Windows上安装anaconda，并配置PySpark库。具体安装步骤如下：</p><p>（1）在课程资料中选择anaconda应用程序双击安装。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps155.jpg" alt="img"> </p><p>（2）一直选择Next，进行安装。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps156.png" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps157.png" alt="img"> </p><p>注意：选择第一个，将anaconda添加至我的环境变量中！</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps158.png" alt="img"> </p><p>（1）安装结束后会出现anaconda3文件夹。打开Anaconda Prompt(anaconda),会出现base，即为安装成功。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps159.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps160.jpg" alt="img"> </p><p>（4）配置国内源，加速网络下载。</p><p>1、在Anaconda Prompt(anaconda)中执行conda config –set show_channel</p><p>_urls yes。</p><p>2、将如下内容替换到C:\Users\用户名.condarc文件中。</p><p>channels:</p><p> - defaults</p><p>show_channel_urls: true</p><p>default_channels:</p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</a></p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</a></p><p> - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</a></p><p>custom_channels:</p><p> conda-forge: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> msys2: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> bioconda: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> menpo: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> pytorch: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p> simpleitk: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</a></p><p>（5）创建虚拟环境</p><p>1、创建虚拟环境 pyspark, 基于Python 3.8</p><p>conda create -n pyspark python&#x3D;3.8</p><p>2、切换到虚拟环境内</p><p>conda activate pyspark</p><p>3、在虚拟环境内安装包</p><p>pip install pyhive pyspark jieba -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/</a></p><p>simple</p><p>安装成功示例：</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps161.jpg" alt="img"> </p><p>（三）PyCharm中配置Python解释器</p><p>（1）配置本地解释器：创建Python项目，选择conda虚拟环境PySpark中的Python.exe解释器。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps162.jpg" alt="img"> </p><p>（2）配置远程SSH Linux解释器</p><p>1、远程SSH python pyspark环境</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps163.jpg" alt="img"> </p><p>2、添加新的远程连接</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps164.jpg" alt="img"><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps165.jpg" alt="img"> </p><p>3、设置虚拟的python环境路径</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps166.jpg" alt="img"> </p><p>（四）WordCount应用实战</p><p>可以选择在本地的PySpark环境中执行spark代码，也可以选择在虚拟机环境PySpark中执行。选择本地的就是使用conda环境，应用其中的PySpark环境执行，来读取本地文件，完成单词计数的实例。选择远程虚拟机中的PySpark环境，需要SSH连接到服务器（这里需要安装Pycharm专业版），注意：无论是选择那种方案，都是在PyCharm软件中去执行，完成上述过程。</p><p>（1）WordCount代码本地执行</p><p>准备pyspark代码以及本地文件words.txt，在PyCharm中执行。</p><p># coding:utf8</p><p>from pyspark import SparkConf, SparkContext</p><p># import os</p><p>import os</p><p>os.environ[‘PYSPARK_PYTHON’]&#x3D;’D:\anaconda3\envs\pyspark\python.exe’</p><p>os.environ [‘JAVA_HOME’] &#x3D; ‘D:\Java\jdk1.8.0_241’</p><p>#os.environ[‘PYSPARK_PYTHON’]&#x3D;’&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;envs&#x2F;pyspark&#x2F;bin&#x2F;python3.8’</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:</p><p>  conf &#x3D; SparkConf().setAppName(“WordCountHelloWorld”).setMaster(“local[*]”)</p><p>  # 通过SparkConf对象构建SparkContext对象</p><p>  sc &#x3D; SparkContext(conf&#x3D;conf)</p><p>  # 需求 : wordcount单词计数, 读取HDFS上的words.txt文件, 对其内部的单词统计出现 的数量</p><p>  # 读取文件</p><p>  #file_rdd &#x3D; sc.textFile(“hdfs:&#x2F;&#x2F;node1:8020&#x2F;input&#x2F;words.txt”)</p><p>  #file_rdd &#x3D; sc.textFile(“file:&#x2F;&#x2F;&#x2F;tmp&#x2F;pycharm_project_621&#x2F;data&#x2F;words.txt”)</p><p>  file_rdd &#x3D; sc.textFile(“D:\数据挖掘与分析实验报告合集\pyspark\data\input\words.txt”)</p><p>  # 将单词进行切割, 得到一个存储全部单词的集合对象</p><p>  words_rdd &#x3D; file_rdd.flatMap(lambda line: line.split(“ “))</p><p>  # 将单词转换为元组对象, key是单词, value是数字1</p><p>  words_with_one_rdd &#x3D; words_rdd.map(lambda x: (x, 1))</p><p>  # 将元组的value 按照key来分组, 对所有的value执行聚合操作(相加)</p><p>  result_rdd &#x3D; words_with_one_rdd.reduceByKey(lambda a, b: a + b)</p><p>  # 通过collect方法收集RDD的数据打印输出结果</p><p>print(result_rdd.collect())</p><p>运行结果截图：</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps167.jpg" alt="img"> </p><p>（2）WordCount代码远程服务器上执行。</p><p>通过SSH连接到远程服务器上，详见上述操作。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps168.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps169.jpg" alt="img"> </p><p>完成与服务器连接后，会在服务器中的&#x2F;tmp文件夹下新建了pycharm_project_xxx文件夹用于放置本地的同步代码。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps170.jpg" alt="img"> </p><p>（3）读取HDFS上的文件</p><p>1、将读取文件路径改为hdfs上的&#x2F;input&#x2F;words.txt</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps171.jpg" alt="img"> </p><p>2、在hdfs上新建&#x2F;input文件夹，使用命令hadoop fs -mkdir &#x2F;input</p><p>3、上传words.txt到hdfs中，使用命令hadoop fs -put words.txt &#x2F;input&#x2F;</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps172.jpg" alt="img"> </p><p>4、在pycharm中执行spark代码</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps173.jpg" alt="img"> </p><p>（五）spark-submit作业提交</p><p>（1）local本地模式</p><p>首先将helloword.py程序放到&#x2F;root&#x2F;目录下，使用命令bin&#x2F;spark-submit –master local[*] &#x2F;root&#x2F;helloworld.py完成提交作业。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps174.jpg" alt="img"> </p><p>（2）spark on yarn模式</p><p>使用命令bin&#x2F;spark-submit –master yarn &#x2F;root&#x2F;helloworld.py完成提交作业。</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps175.jpg" alt="img"> </p><p>（3）使用历史服务器查看任务执行情况 node1:18080</p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps176.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88Pyspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE%EF%BC%89/wps177.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（pyspark基础编码环境）&quot;&gt;&lt;a href=&quot;#spark（pyspark基础编码环境）&quot; class=&quot;headerlink&quot; title=&quot;spark（pyspark基础编码环境）&quot;&gt;&lt;/a&gt;&lt;strong&gt;spark（pyspark基础编码环</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark（local）配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:12:06.000Z</published>
    <updated>2023-06-09T00:58:26.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（local环境部署）"><a href="#spark（local环境部署）" class="headerlink" title="spark（local环境部署）"></a>spark（local环境部署）</h2><p>（1）安装Anaconda</p><p>上传安装包 sh .&#x2F;Anaconda3-2021.05-Linux-x86_64.sh</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps37.jpg" alt="img"> </p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps38.jpg" alt="img"></p><p>出现（base)即为安装成功</p><p>（2）创建虚拟环境</p><p>conda create -n pyspark python&#x3D;3.8</p><p>conda activate pyspark</p><p>pip install pyhive pyspark jieba -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn</a></p><p>&#x2F;simple</p><p>（3）修改环境变量配置Spark由如下5个环境变量需要设置</p><p>SPARK_HOME: 表示Spark安装路径在哪里 </p><p>PYSPARK_PYTHON: 表示Spark想运行Python程序, 那么去哪里找python执行器。 </p><p>JAVA_HOME: 告知Spark Java在哪里 </p><p>HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件在哪里 </p><p>HADOOP_HOME: 告知Spark  Hadoop安装在哪里</p><p>这5个环境变量 都需要配置在: &#x2F;etc&#x2F;profile中！</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps39.jpg" alt="img"> </p><p>（4）解压</p><p>解压下载的Spark安装包</p><p>tar -zxvf spark-3.2.0-bin-hadoop3.2.tgz -C &#x2F;export&#x2F;server&#x2F;</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps40.jpg" alt="img"></p><p>设置软连接</p><p>ln -s &#x2F;export&#x2F;server&#x2F;spark-3.2.0-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark</p><p>（5）测试</p><p>bin&#x2F;pyspark</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps41.jpg" alt="img">如图：</p><p><img src="/2023/06/09/Spark%EF%BC%88local%EF%BC%89%E9%85%8D%E7%BD%AE/wps42.jpg" alt="img"> </p><p>sc.parallelize([1,2,3,4,5]).map(lambda x: x + 1).collect()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（local环境部署）&quot;&gt;&lt;a href=&quot;#spark（local环境部署）&quot; class=&quot;headerlink&quot; title=&quot;spark（local环境部署）&quot;&gt;&lt;/a&gt;spark（local环境部署）&lt;/h2&gt;&lt;p&gt;（1）安装Anaconda&lt;</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Docker%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Docker%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:11:03.000Z</published>
    <updated>2023-06-09T01:12:26.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、<strong>安装docker</strong></h2><p>（1）卸载（可选）</p><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><p>yum remove docker \</p><p>​         docker-client \</p><p>​         docker-client-latest \</p><p>​         docker-common \</p><p>​         docker-latest \</p><p>​         docker-latest-logrotate \</p><p>​         docker-logrotate \</p><p>​         docker-selinux \</p><p>​         docker-engine-selinux \</p><p>​         docker-engine \</p><p>​         docker-ce</p><p>（2）yum源配置</p><p>1.备份配置文件</p><p>1）mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS</p><p>-Base.repo.backup</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps65.jpg" alt="img"> </p><p>2）wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun</a></p><p>.com&#x2F;repo&#x2F;Centos-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps66.jpg" alt="img"> </p><p>3）wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo">http://mirrors.aliyun.com/rep</a></p><p>o&#x2F;epel-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps67.jpg" alt="img"> </p><p>4）yum clean all</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps68.jpg" alt="img"> </p><p>5）yum makecache</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps69.jpg" alt="img"> </p><p>6）yum install -y bash-completion vim lrzsz wget expect net-tools nc nmap treedos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc ntpdate openldap-devel</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps70.jpg" alt="img"> </p><p><em><strong>*安装docker*</strong></em></p><p>（1）受限需要虚拟机联网，安装yum工具</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps71.jpg" alt="img"> </p><p>（2）配置网卡转发</p><p>1）docker必须安装在centos7平台，内核版本不低于3.10在centos平台运行docker可能会遇见些告警信息，修改内核配置参数，打开内核转发功能</p><p>#写入</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps72.jpg" alt="img"> </p><p>2）重新加载内核参数</p><p>modprobe br_netfilter</p><p>sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;docker.conf</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps73.jpg" alt="img"> </p><p>（3）利用yum进行docker安装</p><p>提前配置好yum仓库</p><p>1）阿里云自带仓库</p><p>curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;Centos-7.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/</a></p><p>Centos-7.repo</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps74.jpg" alt="img"> </p><p> 2）阿里云提供的docker专属repo仓库</p><p>curl-o&#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps75.jpg" alt="img"> </p><p>3）更新yum缓存</p><p>yum clean all &amp;&amp; yum makecache</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps76.jpg" alt="img"> </p><p>4）查看源中可用版本</p><p>yum list docker-ce –showduplicates | sort -r</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps77.jpg" alt="img"> </p><p>5）yum安装</p><p>yum install docker-ce -y</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps78.jpg" alt="img"> </p><p>docker -v</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps79.jpg" alt="img"> </p><p>卸载</p><p>yum remove -y docker-ce-xxx</p><p>（4）配置镜像加速器</p><p>用于加速镜像文件下载,选用阿里云镜像站</p><p>1）mkdir -p &#x2F;etc&#x2F;docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps80.jpg" alt="img"> </p><p>\1. touch &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps81.jpg" alt="img"> </p><p>2）进入文件vim &#x2F;etc&#x2F;docker&#x2F;daemon.json编写以下内容：</p><p>{</p><p>“registry-mirrors” : [</p><p>“<a href="https://8xpk5wnt.mirror.aliyuncs.com/">https://8xpk5wnt.mirror.aliyuncs.com</a>“</p><p>]</p><p>}</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps82.jpg" alt="img"> </p><p>（5）启动docker</p><p>1）关闭防火墙：systemctl stop firewalld</p><p>2）禁止开机启动防火墙：systemctl disable firewalld</p><p>3）查看防火墙状态：systemctl status firewalld</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps83.jpg" alt="img"> </p><p>通过命令启动docker：</p><p>systemctl start docker  启动docker服务</p><p>systemctl stop docker  停止docker服务</p><p>systemctl restart docker  重启docker服务</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps84.jpg" alt="img"> </p><p>docker配置文件重新加载：systemctl daemon-reload</p><p>设置开启自启动：systemctl enable docker</p><p>（6）查看docker信息：docker info</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps85.jpg" alt="img"> </p><p>（7）显示当前正在运行的容器：docker ps</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps86.jpg" alt="img"> </p><p>（8）docker镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps87.jpg" alt="img"> </p><p>（9）docker版本：docker version</p><p>docker-client</p><p>which docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps88.jpg" alt="img"> </p><p>docker daemon，运行在docker host上，负责创建、运行、监控容器、构建、存储镜像</p><p>ps aux |grep docker</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps89.jpg" alt="img"> </p><p>containerd</p><p>ps aux|grep containerd</p><p>systemctl status containerd</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps90.jpg" alt="img"> </p><p><em><strong>*docker的基本操作*</strong></em></p><p>\1. 启动第一个docker容器</p><p>Nginx web服务器，运行一个80端口的网站</p><p>在宿主机上，运行Nginx</p><p>开启服务器</p><p>2.在服务器上安装好运行nginx所需的依赖关系</p><p>3.安装nginx yum install nginx -y</p><p>4.修改nginx配置文件</p><p>5.启动nginx</p><p>6.客户端去访问nginx</p><p>（1）查看本地的docker镜像有哪些：docker image ls 或 docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps91.jpg" alt="img"> </p><p>（2）可选择删除旧版本：docker rmi 镜像id</p><p>（3）搜索一下远程仓库中的镜像文件是否存在：docker search nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps92.jpg" alt="img"> </p><p>（4）docker pull nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps93.jpg" alt="img"> </p><p>（5）再次查看镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps94.jpg" alt="img"> </p><p>（6）运行镜像，运行出具体内容，在容器中就跑着一个nginx服务，docker run 参数 镜像的名字&#x2F;id</p><p>#-d 后台运行容器</p><p>#-p 80:80 端口映射，宿主机端口：容器内端口，访问宿主机的80端口，也就访问到容器中的80端口，会返回一个容器的id</p><p>docker run -d -p 80:80 nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps95.jpg" alt="img"> </p><p>（7）查看容器是否在运行：docker ps</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps96.jpg" alt="img"> </p><p>（8）访问网站192.168.88.163:80</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps97.jpg" alt="img"> </p><p>（9）停止容器：docker stop 容器id</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps98.jpg" alt="img"> </p><p>（10）恢复容器：docker start 容器id</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps99.jpg" alt="img"> </p><p><em><strong>*docker镜像原理*</strong></em></p><p>（1）查看发行版： cat &#x2F;etc&#x2F;redhat-release </p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps100.jpg" alt="img"> </p><p>（2）查看内核：uname -r</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps101.jpg" alt="img"> </p><p>（3）利用docker获取不同的发行版镜像（例如centos：7.8.2003）：docker pull centos:7.8.2003</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps102.jpg" alt="img"> </p><p>（4）确认当前宿主机的发行版：cat &#x2F;etc&#x2F;redhat-release</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps103.jpg" alt="img"> </p><p>（5）运行centos:7.8.2003发行版本</p><p>#运行容器，且进入容器内部</p><p>#参数解释，-i 交互式命令操作 -t 开启一个终端 bash 进入容器后执行的命令</p><p>docker run -it afb6fca791e0 bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps104.jpg" alt="img"> </p><p>（6）退出容器空间：exit</p><p><em><strong>*获取镜像*</strong></em></p><p>（1）docker search 镜像名:tag tag就是具体的标签版本：docker search centos</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps105.jpg" alt="img"> </p><p>（2）查看docker镜像的存储路径：docker info |grep Root</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps106.jpg" alt="img"> </p><p>（3）具体位置：ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;imagedb&#x2F;content&#x2F;sha256</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps107.jpg" alt="img"> </p><p>（4）使用不同的镜像，生成容器# -it 开启一个交互式的终端–rm 容器退出时删除该容器</p><p>#再运行一个7.8centos</p><p>docker run -it –rm centos bash</p><p><em><strong>*查看镜像*</strong></em></p><p>（1）查看所有镜像：docker images</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps108.jpg" alt="img"> </p><p>（2）指定tag查看：docker images centos:7.8.2003</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps109.jpg" alt="img"> </p><p>（3）只列出镜像id  #-q –quiet 只列出id：docker images -q</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps110.jpg" alt="img"> </p><p>（4）格式化显示镜像</p><p># 这是docker的模板语言，–format</p><p>docker images –format “{ {.ID} }–{ {.Repository} }”</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps111.jpg" alt="img"> </p><p><em><strong>*删除镜像*</strong></em></p><p>（1）删除容器记录：docker rm 容器id</p><p>（2）指定id的前三位即可：docker rmi 镜像id</p><p><em><strong>*镜像管理*</strong></em></p><p>（1）批量删除镜像，慎用：docker rmi ‘docker images -aq’</p><p>（2）批量删除容器：docker rm ‘docker ps -aq’</p><p>（3）导出镜像：docker save -o nginx.tgz nginx:latest#打包tar包</p><p>（4）导入镜像：</p><p>①先删除本地的nginx镜像：docker rmi centos:7.8.2003</p><p>②docker image load -i &#x2F;export&#x2F;software&#x2F;centos1.8.2003.tgz#重新加载nginx-tar包</p><p>③查看cocker服务的信息：docker info</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps112.jpg" alt="img"> </p><p>④查看镜像详细信息：docker image inspact 镜像id</p><p><em><strong>*docker镜像管理练习*</strong></em></p><p>（1）去DockerHub搜索Redies</p><p>（2）利用docker pull命令拉去镜像：docker pull redis</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps113.jpg" alt="img"> </p><p>（3）查看Redies镜像的名称和版本：docker search redis</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps114.jpg" alt="img"> </p><p>（4）利用docker save命令将redies:latest打包为一个redies.tar包</p><p>docker save -o redis.tar redis:latest</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps115.jpg" alt="img"> </p><p>（5）利用docker rmi删除本地的redis:latest </p><p>docker rmi redis:latest</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps116.jpg" alt="img"> </p><p>（6）利用docker load重新加载Redis.tar文件</p><p>docker load -i redis.tar</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps117.jpg" alt="img"> </p><p><em><strong>*容器操作*</strong></em></p><p>\1. 创建并运行mn容器</p><p>docker run –name mn -p 80:80 -d nginx</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps118.jpg" alt="img"> </p><p>\2. 运行刚刚创建的nginx容器</p><p>docker exec -it mn bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps119.jpg" alt="img"> </p><p>\3. 进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p>cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps120.jpg" alt="img"> </p><p>\4. 修改index.html的内容</p><p>sed -i -e ‘s#Welcome to nginx#人工智能学院欢迎您#g’ -e ‘s#<head>#<head><meta charset="utf-8">#g’ index.html</head></head></p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps121.jpg" alt="img"> </p><p><em><strong>*创建和查看数据卷*</strong></em></p><p>\1. 创建数据卷</p><p>docker volume create html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps122.jpg" alt="img"> </p><p>\2. 查看所有数据</p><p>docker volume ls</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps123.jpg" alt="img"> </p><p>\3. 查看数据卷详细信息卷</p><p>docker volume inspect html</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps124.jpg" alt="img"> </p><p>\4. 挂载数据卷</p><p>（1）创建容器并挂载数据卷到容器内的HTML目录，把&#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;数据卷挂载到容器内的&#x2F;user&#x2F;share&#x2F;nginx&#x2F;html目录中：</p><p>docker run –name mn -v &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -p 80:80 -d nginx</p><p>（2）进入html数据卷所在位置，并修改HTML内容</p><p>查看html数据卷的位置：</p><p>docker volume inspect &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;</p><p>（3）进入该目录</p><p>cd &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;nginx-html&#x2F;_data</p><p>（4）修改文件vi index.html</p><p><em><strong>*Docker应用部署*</strong></em></p><p>\1. 搜索mysql镜像：docker search mysql</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps125.jpg" alt="img"> </p><p>\2. 拉取mysql镜像</p><p>docker pull mysql:5.6</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps126.jpg" alt="img"> </p><p>\3. 创建容器，设置端口映射、目录映射</p><p>mkdir -p &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;mysql</p><p>cd &#x2F;export&#x2F;data&#x2F;docker-data&#x2F;mysql</p><p>docker run -id \</p><p>-p 3306:3306 \</p><p>–name&#x3D;bigdata_mysql \</p><p>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \</p><p>-v $PWD&#x2F;logs:&#x2F;logs \</p><p>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;hadoop \</p><p>mysql:5.7.29</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps127.jpg" alt="img"> </p><p>\4. 进入容器，操作mysql</p><p>docker exec –it bigdata_mysql &#x2F;bin&#x2F;bash</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps128.jpg" alt="img"> </p><p>\5. 使用外部机器连接容器中的mysql</p><p><img src="/2023/06/09/Docker%E9%85%8D%E7%BD%AE/wps129.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;安装docker&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）卸载（可选）&lt;/p&gt;
&lt;p&gt;如果之前</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Docker" scheme="http://ssyyxx123.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Git%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Git%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:10:53.000Z</published>
    <updated>2023-06-09T01:12:38.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a><strong>Git安装</strong></h2><p>（1）Git下载</p><p>核心程序</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps41.jpg" alt="img"> </p><p>（2）可视化客户端</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps42.jpg" alt="img"> </p><p>中文语言包</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps43.jpg" alt="img"> </p><p>（3）初始化仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps44.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps45.jpg" alt="img"> </p><p>（4）添加文件，提交文件至本地仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps46.jpg" alt="img"> </p><p>（5）本地删除与恢复</p><p>文件选中删除，可用以下方式还原</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps47.jpg" alt="img"> </p><p>（6）创建分支</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps48.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps49.jpg" alt="img"> </p><p>（7）分支的查看切换</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps50.jpg" alt="img"> </p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/06/09/Git%E9%85%8D%E7%BD%AE/wps52.jpg" class title="img](.&#x2F;&#x2F;Git配置&#x2F;wps51.jpg)![img"> <p>（8）标签的创建</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps53.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps54.jpg" alt="img"> </p><p>（9）切换与删除</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps55.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps56.jpg" alt="img"> </p><p>通过右键选中删除</p><p><em><strong>*远程仓库*</strong></em></p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps57.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps58.jpg" alt="img"> </p><p>（1）码云账号注册</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps59.jpg" alt="img"> </p><p>填写邮箱发送验证码,然后可以注册账号,主页如下</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps60.jpg" alt="img"> </p><p>（2）创建远程仓库</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps61.jpg" alt="img"> </p><p>（3）把本地代码推送到远端</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps62.jpg" alt="img"> </p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps63.jpg" alt="img"> </p><p>生成公钥私钥</p><p>ssh-keygen -t rsa</p><p>一直回车</p><p>会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</p><p>密钥配置</p><p><img src="/2023/06/09/Git%E9%85%8D%E7%BD%AE/wps64.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;Git安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）Git下载&lt;/p&gt;
&lt;p&gt;核心程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/20</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Git" scheme="http://ssyyxx123.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hive配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/09/Hive%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/09/Hive%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-09T00:10:43.000Z</published>
    <updated>2023-06-09T00:36:05.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a><strong>Hive安装</strong></h2><p>（1）Mysql安装</p><p>1）卸载Centos7自带的mariadb</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps21.jpg" alt="img"> </p><p>如果出现了mariadb-libs-5.5.64-1.el7.x86_64，输入rpm -e mariadb- libs-5.5.64-1.el7.x86_64 –nodeps,在输入rpm -qa|grep mariadb，即可</p><p>2）安装mysql</p><p>新建文件夹：mkdir &#x2F;export&#x2F;server&#x2F;mysql</p><p>上传mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar到上述文件夹下，解压tar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps22.jpg" alt="img"> </p><p>3）执行安装</p><p>yum -y install libaio</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps23.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps24.jpg" alt="img"> </p><p>4）mysql初始化设置</p><p>初始化：mysqld –initialize</p><p>更改所属组：chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R</p><p>启动mysql：systemctl start mysqld.service</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps25.jpg" alt="img"> </p><p>查看临时生成的root密码：cat  &#x2F;var&#x2F;log&#x2F;mysqld.log</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps26.jpg" alt="img"> </p><p>5）修改root密码 授权远程访问 设置开机自启动</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps27.jpg" alt="img"> </p><p>修改root密码 设置为hadoop</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps28.jpg" alt="img"> </p><p>授权</p><p>use mysql;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘hadoop’ WITH GRANT OPTION;</p><p>FLUSH PRIVILEGES;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps29.jpg" alt="img"> </p><p>mysql的启动和关闭 状态查看 （这几个命令必须记住）</p><p>systemctl stop mysqld</p><p>systemctl status mysqld</p><p>systemctl start mysqld</p><p>设置开机自动启动：systemctl enable  mysqld </p><p>查看是否设置自动启动成功</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps30.jpg" alt="img"> </p><p><em><strong>*（2）*</strong></em><em><strong>*H*</strong></em><em><strong>*ive*</strong></em><em><strong>*的安装*</strong></em></p><p>1）上传安装包 解压</p><p>tar zxvf apache-hive-3.1.2-bin.tar.gz</p><p>ln -s apache-hive-3.1.2-bin hive</p><p>2）解决Hive与Hadoop之间guava版本差异</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;</p><p>rm -rf lib&#x2F;guava-19.0.jar</p><p>cp &#x2F;export&#x2F;server&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-27.0-jre.jar</p><p> .&#x2F;lib&#x2F;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps31.jpg" alt="img"> </p><p>3）修改配置文件</p><p>hive-env.sh</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;conf</p><p>mv hive-env.sh.template hive-env.sh</p><p>vim hive-env.sh</p><p>export HADOOP_HOME&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop</p><p>export HIVE_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hive&#x2F;conf</p><p>export HIVE_AUX_JARS_PATH&#x3D;&#x2F;export&#x2F;server&#x2F;hive&#x2F;lib</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps32.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps33.jpg" alt="img"> </p><p>hive-site.xml</p><p>vim hive-site.xml</p><configuration><!-- 存储元数据mysql相关配置 --><property><p>​<name>javax.jdo.option.ConnectionURL</name></p><p>​<value>jdbc:mysql:&#x2F;&#x2F;node1:3306&#x2F;hive3?createDatabaseIfNotExist&#x3D;true&amp;useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</value></p></property><property><p>​<name>javax.jdo.option.ConnectionDriverName</name></p><p>​<value>com.mysql.jdbc.Driver</value></p></property><property><p>​<name>javax.jdo.option.ConnectionUserName</name></p><p>​<value>root</value></p></property><property><p>​<name>javax.jdo.option.ConnectionPassword</name></p><p>​<value>hadoop</value></p></property><!-- H2S运行绑定host --><property><p>  <name>hive.server2.thrift.bind.host</name></p><p>  <value>node1</value></p></property><!-- 远程模式部署metastore metastore地址 --><property><p>  <name>hive.metastore.uris</name></p><p>  <value>thrift:&#x2F;&#x2F;node1:9083</value></p></property><!-- 关闭元数据存储授权  --> <property><p>  <name>hive.metastore.event.db.notification.api.auth</name></p><p>  <value>false</value></p></property></configuration><p>4）上传mysql jdbc驱动到hive安装包lib下</p><p>mysql-connector-java-5.1.32.jar</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps34.jpg" alt="img"> </p><p>5）初始化元数据</p><p>cd &#x2F;export&#x2F;server&#x2F;hive&#x2F;</p><p>bin&#x2F;schematool -initSchema -dbType mysql -verbos</p><p>初始化成功之后会在MySQL中创建74张表</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps35.jpg" alt="img"> </p><p>6）在hdfs创建hive存储目录（如存在则不用操作）</p><p>hadoop fs -mkdir &#x2F;tmp</p><p>hadoop fs -mkdir -p &#x2F;user&#x2F;hive&#x2F;warehouse</p><p>hadoop fs -chmod g+w &#x2F;tmp</p><p>hadoop fs -chmod g+w &#x2F;user&#x2F;hive&#x2F;warehouse</p><p>7）启动hive</p><p><em><strong>*（*</strong></em><em><strong>*3）*</strong></em><em><strong>*启动metastore服务*</strong></em> 前台启动  关闭ctrl+c</p><p>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps36.jpg" alt="img"> </p><p>前台启动开启debug日志</p><p>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore –hiveconf hive.root.logger&#x3D;DEBUG,console  </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps37.jpg" alt="img"> </p><p>后台启动 进程挂起  关闭使用jps+ kill -9</p><p>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps38.jpg" alt="img"> </p><p><em><strong>*（*</strong></em><em><strong>*4）*</strong></em><em><strong>*启动hiveserver2服务*</strong></em></p><p>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service hiveserver2 &amp;</p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps39.jpg" alt="img"> </p><p><img src="/2023/06/09/Hive%E9%85%8D%E7%BD%AE/wps40.jpg" alt="img"> </p><p>beeline客户端连接</p><p>拷贝node1安装包到beeline客户端机器上（node3）</p><p>scp -r &#x2F;export&#x2F;server&#x2F;apache-hive-3.1.2-bin&#x2F; root@node3:&#x2F;export&#x2F;server&#x2F;</p><p><em><strong>*（5）*</strong></em><em><strong>*hive注释信息中文乱码解决*</strong></em></p><p>以下sql语句均在mysql数据库中执行</p><p>use hivenode2;</p><p>show tables;</p><p>alter table hivenode2.COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;</p><p>alter table hivenode2.TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p><p>alter table hivenode2.PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8 ;</p><p>alter table hivenode2.PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</p><p>alter table hivenode2.INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hive安装&quot;&gt;&lt;a href=&quot;#Hive安装&quot; class=&quot;headerlink&quot; title=&quot;Hive安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;Hive安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）Mysql安装&lt;/p&gt;
&lt;p&gt;1）卸载Centos7自带的maria</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Hive" scheme="http://ssyyxx123.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Spark（stand-alone）配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-07T11:21:51.000Z</published>
    <updated>2023-06-09T00:47:00.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark（StandAlone环境部署）"><a href="#spark（StandAlone环境部署）" class="headerlink" title="spark（StandAlone环境部署）"></a><strong>spark（StandAlone环境部署）</strong></h2><p>（一）、集群规划：选择三台机器分别为node1、node2、node3来组成集群环境。</p><p>其中node1上安装master和worker进程；node2上安装worker进程；node3上安装worker进程。</p><p>（二）、anaconda on linux安装过程：</p><p>（1）前提：在linux服务器node1、node2、node3上都安装python(anaconda)。并安装pyspark虚拟环境。具体安装步骤如下。</p><p>1、在&#x2F;export&#x2F;server&#x2F;目录下上传anaconda的安装包Anaconda3-2021.</p><p>05-Linux-x86_64.sh。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps56.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps57.jpg" alt="img"> </p><p>2、安装anaconda 使用命令：sh .&#x2F;Anaconda3-2021.05-Linux-x86_64.sh</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps58.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps59.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps60.jpg" alt="img"> </p><p>3、安装完毕之后若没有出现base环境，进行如下配置。在&#x2F;root&#x2F;.condarc添加国内源</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps61.jpg" alt="img"> </p><p>安装完毕后，关闭服务器重新启动，出现base环境即安装成功。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps62.jpg" alt="img"> </p><p>（2）在anaconda中，安装pyspark虚拟环境。</p><p>1、基于python3.8安装pyspark环境。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps63.jpg" alt="img"> </p><p>2、切换到pyspark中，并安装所需要的安装包。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps64.jpg" alt="img"> </p><p>注：在node1、node2、node3三台服务器上都完成配置！</p><p>（三）、StandAlone模式部署</p><p>（1）安装spark压缩文件。</p><p>1、进入到&#x2F;export&#x2F;server&#x2F;中上传并解压spark-3.2.0-bin-hadoop3.2.tgz。并设置软链接，命令为ln-s&#x2F;export&#x2F;server&#x2F;spark-3.2.0-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark。</p><p>（2）在&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf，配置文件。</p><p>1、首先在配置workers文件。mv workers.template workers；vim workers；</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps65.jpg" alt="img"> </p><p>2.配置spark-env.sh文件。mv spark-env.sh.template spark-env.sh；</p><p>Vim spark-env.sh，添加如下内容。</p><p>## 设置JAVA安装目录</p><p>JAVA_HOME&#x3D;&#x2F;export&#x2F;server&#x2F;jdk</p><p>## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</p><p>HADOOP_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p><p>YARN_CONF_DIR&#x3D;&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p><p>## 指定spark老大Master的IP和提交任务的通信端口</p><p># 告知Spark的master运行在哪个机器上</p><p>export SPARK_MASTER_HOST&#x3D;node1</p><p># 告知sparkmaster的通讯端口</p><p>export SPARK_MASTER_PORT&#x3D;7077</p><p># 告知spark master的 webui端口</p><p>SPARK_MASTER_WEBUI_PORT&#x3D;8080</p><p># worker cpu可用核数</p><p>SPARK_WORKER_CORES&#x3D;1</p><p># worker可用内存</p><p>SPARK_WORKER_MEMORY&#x3D;1g</p><p># worker的工作通讯地址</p><p>SPARK_WORKER_PORT&#x3D;7078</p><p># worker的 webui地址</p><p>SPARK_WORKER_WEBUI_PORT&#x3D;8081</p><p>## 设置历史服务器</p><p># 配置的意思是  将spark程序运行的历史日志 存到hdfs的&#x2F;sparklog文件夹中</p><p>SPARK_HISTORY_OPTS&#x3D;”-Dspark.history.fs.logDirectory&#x3D;hdfs:&#x2F;&#x2F;node1:8020&#x2F;sparklog&#x2F; -Dspark.history.fs.cleaner.enabled&#x3D;true”</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps66.jpg" alt="img"> </p><p>3、在HDFS上创建程序运行历史记录存放的文件夹。</p><p>hadoop fs -mkdir &#x2F;sparklog；hadoop fs -chmod 777 &#x2F;sparklog</p><p>4、配置spark-defaults.conf文件。mv spark-defaults.conf.template spark-defaults.conf；vim spark-defaults.conf，添加如下内容。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps67.jpg" alt="img"> </p><p>5、配置log4j.properties 文件[可选配置]。mv log4j.properties.template log4j.properties；修改配置，设置级别为WARN 只输出警告和错误日志。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps68.jpg" alt="img"> </p><p>（四）、将spark分发到node2和node3服务器上。注意同时要设置软链接。</p><p>scp -r spark-3.1.2-bin-hadoop3.2 node2:&#x2F;export&#x2F;server&#x2F;</p><p>scp -r spark-3.1.2-bin-hadoop3.2 node3:&#x2F;export&#x2F;server&#x2F;</p><p>ln -s &#x2F;export&#x2F;server&#x2F;spark-3.1.2-bin-hadoop3.2 &#x2F;export&#x2F;server&#x2F;spark</p><p>注意：配置&#x2F;etc&#x2F;profile，JAVA_HOME；SPARK_HOME；PYSPARK_PYTHON都指向正确的目录。</p><p>（五）、启动历史服务器，启动Spark的Master和Worker进程</p><p>（1）启动历史服务器：sbin&#x2F;start-history-server.sh</p><p>（2）启动全部的master和worker：sbin&#x2F;start-all.Sh</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps69.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps70.jpg" alt="img"><img src="file:///C:\Users\86130\AppData\Local\Temp\ksohtml5236\wps71.jpg" alt="img"> </p><p>（六）、查看Master的WEB UI 在浏览器中输入node1:8080</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps72.jpg" alt="img"> </p><p>（七）、连接到StandAlone集群</p><p>（1）通过master来连接到StandAlone集群。</p><p>bin&#x2F;pyspark –master spark:&#x2F;&#x2F;node1:7077</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps73.jpg" alt="img"> </p><p>（2）使用spark-shell连接StandAlone集群。</p><p>bin&#x2F;spark-shell –master spark:&#x2F;&#x2F;node1:7077，进行测试。</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps74.jpg" alt="img"> </p><p>（3）使用spark-submit(PI)提交任务到集群上执行。bin&#x2F;spark-submit –master spark:&#x2F;&#x2F;node1:7077&#x2F;export&#x2F;server&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;Pytho</p><p>n&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps75.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps76.jpg" alt="img"> </p><p>查看历史服务器：在浏览器中输入node1：18080</p><p><img src="/2023/06/07/Spark(stand-alone)%E9%85%8D%E7%BD%AE/wps77.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark（StandAlone环境部署）&quot;&gt;&lt;a href=&quot;#spark（StandAlone环境部署）&quot; class=&quot;headerlink&quot; title=&quot;spark（StandAlone环境部署）&quot;&gt;&lt;/a&gt;&lt;strong&gt;spark（StandAlon</summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark HA &amp; Yarn配置</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-07T11:21:42.000Z</published>
    <updated>2023-06-08T11:07:15.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spark-StandAlone-HA-环境搭建"><a href="#一、Spark-StandAlone-HA-环境搭建" class="headerlink" title="一、Spark StandAlone HA 环境搭建"></a>一、Spark StandAlone HA 环境搭建</h1><p>1、首先进入spark-env.sh中，vim &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps1.jpg" alt="img"> </p><p>2、在spark-env.sh配置文件中删除 export SPARK_MASTER_HOST&#x3D;node1</p><p>（目的是不然机器知道固定的master是谁，不然无法进行master切换）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps2.jpg" alt="img"> </p><p>3、在spark-env.sh配置文件中增加以下内容：</p><p>SPARK_DAEMON_JAVA_OPTS&#x3D;”-Dspark.deploy.recoveryMode&#x3D;ZOOKEEPER -Dspark.deploy.zookeeper.url&#x3D;node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir&#x3D;&#x2F;spark-ha”</p><p># spark.deploy.recoveryMode 指定HA模式 基于Zookeeper实现</p><p># 指定Zookeeper的连接地址</p><p># 指定在Zookeeper中注册临时节点的路径</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps3.jpg" alt="img"> </p><p>4、将spark-env.sh配置文件分发给node2、node3。</p><p>scp -r &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh node2:&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;</p><p>scp -r &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;spark-env.sh node3:&#x2F;export&#x2F;server&#x2F;spark&#x2F;conf&#x2F;</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps4.jpg" alt="img"> </p><p>5、启动StandAlone集群、zookeeper集群：</p><p>①在node1上：sbin&#x2F;start-all.sh</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps5.jpg" alt="img"> </p><p>②在node2上：sbin&#x2F;start-master.sh</p><p>（目的是：备用master，当kill掉node1的master后，程序依然能进行）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps6.jpg" alt="img"> </p><p>6、查看node1、node2的WEB UI</p><p>（如果8080端口被占用了，可以顺延到8081、8082端口，</p><p>其中node1上的master是alive的，node2上的是standby） </p><p>node1:8080–&gt;8081   </p><p>node2:8080–&gt;8081\8082</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps7.jpg" alt="img"> </p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps8.jpg" alt="img"> </p><p>7、Master主备切换，在&#x2F;export&#x2F;server&#x2F;spark路径下提交一个任务到当前alive master上:</p><p>bin&#x2F;spark-submit –master spark:&#x2F;&#x2F;node1:7077 \</p><p>&#x2F;export&#x2F;server&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 1000</p><p>（在提交成功后, 将alive master直接kill掉，系统不会中断，仍然能正常运行结果）</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps9.jpg" alt="img"> </p><p>8、查看Master的WEB UI，只有node2是alive的，证明master切换成功</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps10.jpg" alt="img">二、Spark On YARN 环境搭建</p><p>1、Client模式中driver运行在客户端，在客户端显示输出结果，但是在spark历史服务器不显示logs信息。</p><p>2、Cluster模式中driver运行在YARN容器内部，和ApplicationMaster在同一个容器内，在客户端不显示输出结果，所以在spark历史服务器中显示logs的信息。</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps11.jpg" alt="img"> </p><p>3、client模式测试</p><p>bin&#x2F;spark-submit –master yarn –deploy-mode client –driver-memory 512m ${SPARK_HOME}&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps12.jpg" alt="img"> </p><p>4、 cluster模式测试</p><p>bin&#x2F;spark-submit –master yarn –deploy-mode cluster –driver-memory 512m \</p><p>–conf “spark.pyspark.driver.python&#x3D;&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;bin&#x2F;python3” \</p><p>–conf “spark.pyspark.python&#x3D;&#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;bin&#x2F;python3” ${SPARK_HOME}&#x2F;examples&#x2F;src&#x2F;main&#x2F;python&#x2F;pi.py 10</p><p><img src="/2023/06/07/Spark-HA-Yarn%E9%85%8D%E7%BD%AE/wps13.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Spark-StandAlone-HA-环境搭建&quot;&gt;&lt;a href=&quot;#一、Spark-StandAlone-HA-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、Spark StandAlone HA 环境搭建&quot;&gt;&lt;/a&gt;一、Spark </summary>
      
    
    
    
    <category term="工具" scheme="http://ssyyxx123.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="搭建" scheme="http://ssyyxx123.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
    <category term="spark" scheme="http://ssyyxx123.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ssyyxx123.github.io/2023/06/07/hello-world/"/>
    <id>http://ssyyxx123.github.io/2023/06/07/hello-world/</id>
    <published>2023-06-07T02:01:02.646Z</published>
    <updated>2023-06-07T02:01:02.646Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
